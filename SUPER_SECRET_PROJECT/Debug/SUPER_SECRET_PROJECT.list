
SUPER_SECRET_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006a60  08006a60  00016a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c58  08006c58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c60  08006c60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001b24  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001b30  20001b30  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119a6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029aa  00000000  00000000  000319e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  00034390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b38  00000000  00000000  00034fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f6d  00000000  00000000  00035b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001243b  00000000  00000000  00057a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6b77  00000000  00000000  00069ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00130a1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003440  00000000  00000000  00130a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a44 	.word	0x08006a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006a44 	.word	0x08006a44

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2uiz>:
 80008f4:	004a      	lsls	r2, r1, #1
 80008f6:	d211      	bcs.n	800091c <__aeabi_d2uiz+0x28>
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008fc:	d211      	bcs.n	8000922 <__aeabi_d2uiz+0x2e>
 80008fe:	d50d      	bpl.n	800091c <__aeabi_d2uiz+0x28>
 8000900:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d40e      	bmi.n	8000928 <__aeabi_d2uiz+0x34>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	fa23 f002 	lsr.w	r0, r3, r2
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d102      	bne.n	800092e <__aeabi_d2uiz+0x3a>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800092c:	4770      	bx	lr
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	4770      	bx	lr

08000934 <__aeabi_uldivmod>:
 8000934:	b953      	cbnz	r3, 800094c <__aeabi_uldivmod+0x18>
 8000936:	b94a      	cbnz	r2, 800094c <__aeabi_uldivmod+0x18>
 8000938:	2900      	cmp	r1, #0
 800093a:	bf08      	it	eq
 800093c:	2800      	cmpeq	r0, #0
 800093e:	bf1c      	itt	ne
 8000940:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000944:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000948:	f000 b96e 	b.w	8000c28 <__aeabi_idiv0>
 800094c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000954:	f000 f806 	bl	8000964 <__udivmoddi4>
 8000958:	f8dd e004 	ldr.w	lr, [sp, #4]
 800095c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000960:	b004      	add	sp, #16
 8000962:	4770      	bx	lr

08000964 <__udivmoddi4>:
 8000964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000968:	9d08      	ldr	r5, [sp, #32]
 800096a:	4604      	mov	r4, r0
 800096c:	468c      	mov	ip, r1
 800096e:	2b00      	cmp	r3, #0
 8000970:	f040 8083 	bne.w	8000a7a <__udivmoddi4+0x116>
 8000974:	428a      	cmp	r2, r1
 8000976:	4617      	mov	r7, r2
 8000978:	d947      	bls.n	8000a0a <__udivmoddi4+0xa6>
 800097a:	fab2 f282 	clz	r2, r2
 800097e:	b142      	cbz	r2, 8000992 <__udivmoddi4+0x2e>
 8000980:	f1c2 0020 	rsb	r0, r2, #32
 8000984:	fa24 f000 	lsr.w	r0, r4, r0
 8000988:	4091      	lsls	r1, r2
 800098a:	4097      	lsls	r7, r2
 800098c:	ea40 0c01 	orr.w	ip, r0, r1
 8000990:	4094      	lsls	r4, r2
 8000992:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000996:	0c23      	lsrs	r3, r4, #16
 8000998:	fbbc f6f8 	udiv	r6, ip, r8
 800099c:	fa1f fe87 	uxth.w	lr, r7
 80009a0:	fb08 c116 	mls	r1, r8, r6, ip
 80009a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a8:	fb06 f10e 	mul.w	r1, r6, lr
 80009ac:	4299      	cmp	r1, r3
 80009ae:	d909      	bls.n	80009c4 <__udivmoddi4+0x60>
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b6:	f080 8119 	bcs.w	8000bec <__udivmoddi4+0x288>
 80009ba:	4299      	cmp	r1, r3
 80009bc:	f240 8116 	bls.w	8000bec <__udivmoddi4+0x288>
 80009c0:	3e02      	subs	r6, #2
 80009c2:	443b      	add	r3, r7
 80009c4:	1a5b      	subs	r3, r3, r1
 80009c6:	b2a4      	uxth	r4, r4
 80009c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80009cc:	fb08 3310 	mls	r3, r8, r0, r3
 80009d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d8:	45a6      	cmp	lr, r4
 80009da:	d909      	bls.n	80009f0 <__udivmoddi4+0x8c>
 80009dc:	193c      	adds	r4, r7, r4
 80009de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e2:	f080 8105 	bcs.w	8000bf0 <__udivmoddi4+0x28c>
 80009e6:	45a6      	cmp	lr, r4
 80009e8:	f240 8102 	bls.w	8000bf0 <__udivmoddi4+0x28c>
 80009ec:	3802      	subs	r0, #2
 80009ee:	443c      	add	r4, r7
 80009f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f4:	eba4 040e 	sub.w	r4, r4, lr
 80009f8:	2600      	movs	r6, #0
 80009fa:	b11d      	cbz	r5, 8000a04 <__udivmoddi4+0xa0>
 80009fc:	40d4      	lsrs	r4, r2
 80009fe:	2300      	movs	r3, #0
 8000a00:	e9c5 4300 	strd	r4, r3, [r5]
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	b902      	cbnz	r2, 8000a0e <__udivmoddi4+0xaa>
 8000a0c:	deff      	udf	#255	; 0xff
 8000a0e:	fab2 f282 	clz	r2, r2
 8000a12:	2a00      	cmp	r2, #0
 8000a14:	d150      	bne.n	8000ab8 <__udivmoddi4+0x154>
 8000a16:	1bcb      	subs	r3, r1, r7
 8000a18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	2601      	movs	r6, #1
 8000a22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a26:	0c21      	lsrs	r1, r4, #16
 8000a28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb08 f30c 	mul.w	r3, r8, ip
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0xe4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0xe2>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	f200 80e9 	bhi.w	8000c18 <__udivmoddi4+0x2b4>
 8000a46:	4684      	mov	ip, r0
 8000a48:	1ac9      	subs	r1, r1, r3
 8000a4a:	b2a3      	uxth	r3, r4
 8000a4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a58:	fb08 f800 	mul.w	r8, r8, r0
 8000a5c:	45a0      	cmp	r8, r4
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x10c>
 8000a60:	193c      	adds	r4, r7, r4
 8000a62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x10a>
 8000a68:	45a0      	cmp	r8, r4
 8000a6a:	f200 80d9 	bhi.w	8000c20 <__udivmoddi4+0x2bc>
 8000a6e:	4618      	mov	r0, r3
 8000a70:	eba4 0408 	sub.w	r4, r4, r8
 8000a74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a78:	e7bf      	b.n	80009fa <__udivmoddi4+0x96>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0x12e>
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	f000 80b1 	beq.w	8000be6 <__udivmoddi4+0x282>
 8000a84:	2600      	movs	r6, #0
 8000a86:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	4631      	mov	r1, r6
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f683 	clz	r6, r3
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d14a      	bne.n	8000b30 <__udivmoddi4+0x1cc>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0x140>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80b8 	bhi.w	8000c14 <__udivmoddi4+0x2b0>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0103 	sbc.w	r1, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	468c      	mov	ip, r1
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d0a8      	beq.n	8000a04 <__udivmoddi4+0xa0>
 8000ab2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ab6:	e7a5      	b.n	8000a04 <__udivmoddi4+0xa0>
 8000ab8:	f1c2 0320 	rsb	r3, r2, #32
 8000abc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ac0:	4097      	lsls	r7, r2
 8000ac2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ac6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aca:	40d9      	lsrs	r1, r3
 8000acc:	4330      	orrs	r0, r6
 8000ace:	0c03      	lsrs	r3, r0, #16
 8000ad0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ad4:	fa1f f887 	uxth.w	r8, r7
 8000ad8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f108 	mul.w	r1, r6, r8
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	fa04 f402 	lsl.w	r4, r4, r2
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x19c>
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000af2:	f080 808d 	bcs.w	8000c10 <__udivmoddi4+0x2ac>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 808a 	bls.w	8000c10 <__udivmoddi4+0x2ac>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	443b      	add	r3, r7
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b281      	uxth	r1, r0
 8000b04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b10:	fb00 f308 	mul.w	r3, r0, r8
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x1c4>
 8000b18:	1879      	adds	r1, r7, r1
 8000b1a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b1e:	d273      	bcs.n	8000c08 <__udivmoddi4+0x2a4>
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d971      	bls.n	8000c08 <__udivmoddi4+0x2a4>
 8000b24:	3802      	subs	r0, #2
 8000b26:	4439      	add	r1, r7
 8000b28:	1acb      	subs	r3, r1, r3
 8000b2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b2e:	e778      	b.n	8000a22 <__udivmoddi4+0xbe>
 8000b30:	f1c6 0c20 	rsb	ip, r6, #32
 8000b34:	fa03 f406 	lsl.w	r4, r3, r6
 8000b38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b3c:	431c      	orrs	r4, r3
 8000b3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b42:	fa01 f306 	lsl.w	r3, r1, r6
 8000b46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	0c3b      	lsrs	r3, r7, #16
 8000b52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b56:	fa1f f884 	uxth.w	r8, r4
 8000b5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b62:	fb09 fa08 	mul.w	sl, r9, r8
 8000b66:	458a      	cmp	sl, r1
 8000b68:	fa02 f206 	lsl.w	r2, r2, r6
 8000b6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x220>
 8000b72:	1861      	adds	r1, r4, r1
 8000b74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b78:	d248      	bcs.n	8000c0c <__udivmoddi4+0x2a8>
 8000b7a:	458a      	cmp	sl, r1
 8000b7c:	d946      	bls.n	8000c0c <__udivmoddi4+0x2a8>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4421      	add	r1, r4
 8000b84:	eba1 010a 	sub.w	r1, r1, sl
 8000b88:	b2bf      	uxth	r7, r7
 8000b8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b96:	fb00 f808 	mul.w	r8, r0, r8
 8000b9a:	45b8      	cmp	r8, r7
 8000b9c:	d907      	bls.n	8000bae <__udivmoddi4+0x24a>
 8000b9e:	19e7      	adds	r7, r4, r7
 8000ba0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ba4:	d22e      	bcs.n	8000c04 <__udivmoddi4+0x2a0>
 8000ba6:	45b8      	cmp	r8, r7
 8000ba8:	d92c      	bls.n	8000c04 <__udivmoddi4+0x2a0>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4427      	add	r7, r4
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	eba7 0708 	sub.w	r7, r7, r8
 8000bb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000bba:	454f      	cmp	r7, r9
 8000bbc:	46c6      	mov	lr, r8
 8000bbe:	4649      	mov	r1, r9
 8000bc0:	d31a      	bcc.n	8000bf8 <__udivmoddi4+0x294>
 8000bc2:	d017      	beq.n	8000bf4 <__udivmoddi4+0x290>
 8000bc4:	b15d      	cbz	r5, 8000bde <__udivmoddi4+0x27a>
 8000bc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000bca:	eb67 0701 	sbc.w	r7, r7, r1
 8000bce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000bd2:	40f2      	lsrs	r2, r6
 8000bd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000bd8:	40f7      	lsrs	r7, r6
 8000bda:	e9c5 2700 	strd	r2, r7, [r5]
 8000bde:	2600      	movs	r6, #0
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	462e      	mov	r6, r5
 8000be8:	4628      	mov	r0, r5
 8000bea:	e70b      	b.n	8000a04 <__udivmoddi4+0xa0>
 8000bec:	4606      	mov	r6, r0
 8000bee:	e6e9      	b.n	80009c4 <__udivmoddi4+0x60>
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	e6fd      	b.n	80009f0 <__udivmoddi4+0x8c>
 8000bf4:	4543      	cmp	r3, r8
 8000bf6:	d2e5      	bcs.n	8000bc4 <__udivmoddi4+0x260>
 8000bf8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bfc:	eb69 0104 	sbc.w	r1, r9, r4
 8000c00:	3801      	subs	r0, #1
 8000c02:	e7df      	b.n	8000bc4 <__udivmoddi4+0x260>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e7d2      	b.n	8000bae <__udivmoddi4+0x24a>
 8000c08:	4660      	mov	r0, ip
 8000c0a:	e78d      	b.n	8000b28 <__udivmoddi4+0x1c4>
 8000c0c:	4681      	mov	r9, r0
 8000c0e:	e7b9      	b.n	8000b84 <__udivmoddi4+0x220>
 8000c10:	4666      	mov	r6, ip
 8000c12:	e775      	b.n	8000b00 <__udivmoddi4+0x19c>
 8000c14:	4630      	mov	r0, r6
 8000c16:	e74a      	b.n	8000aae <__udivmoddi4+0x14a>
 8000c18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c1c:	4439      	add	r1, r7
 8000c1e:	e713      	b.n	8000a48 <__udivmoddi4+0xe4>
 8000c20:	3802      	subs	r0, #2
 8000c22:	443c      	add	r4, r7
 8000c24:	e724      	b.n	8000a70 <__udivmoddi4+0x10c>
 8000c26:	bf00      	nop

08000c28 <__aeabi_idiv0>:
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <init_AudioReset>:

#include "audio.h"
#include "gpio.h"
#include "i2c.h"

void init_AudioReset() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2110      	movs	r1, #16
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <init_AudioReset+0x14>)
 8000c36:	f001 fe67 	bl	8002908 <HAL_GPIO_WritePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40020c00 	.word	0x40020c00

08000c44 <configAudio>:

void configAudio() {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
	uint8_t bytes[2];
	init_AudioReset();
 8000c4a:	f7ff ffef 	bl	8000c2c <init_AudioReset>

	/** Power sequence **/
	// Set Power Control Register to "on" state
	bytes[0] = 0x02;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x01;
 8000c52:	2301      	movs	r3, #1
 8000c54:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000c56:	1d3a      	adds	r2, r7, #4
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	2194      	movs	r1, #148	; 0x94
 8000c60:	486f      	ldr	r0, [pc, #444]	; (8000e20 <configAudio+0x1dc>)
 8000c62:	f001 ffaf 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	/** Initialization sequence **/
	bytes[0] = 0x00;
 8000c66:	2300      	movs	r3, #0
 8000c68:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x99;
 8000c6a:	2399      	movs	r3, #153	; 0x99
 8000c6c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000c6e:	1d3a      	adds	r2, r7, #4
 8000c70:	2364      	movs	r3, #100	; 0x64
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2302      	movs	r3, #2
 8000c76:	2194      	movs	r1, #148	; 0x94
 8000c78:	4869      	ldr	r0, [pc, #420]	; (8000e20 <configAudio+0x1dc>)
 8000c7a:	f001 ffa3 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x47;
 8000c7e:	2347      	movs	r3, #71	; 0x47
 8000c80:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x80;
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000c86:	1d3a      	adds	r2, r7, #4
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	2194      	movs	r1, #148	; 0x94
 8000c90:	4863      	ldr	r0, [pc, #396]	; (8000e20 <configAudio+0x1dc>)
 8000c92:	f001 ff97 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x32;
 8000c96:	2332      	movs	r3, #50	; 0x32
 8000c98:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x80;
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000c9e:	1d3a      	adds	r2, r7, #4
 8000ca0:	2364      	movs	r3, #100	; 0x64
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	2194      	movs	r1, #148	; 0x94
 8000ca8:	485d      	ldr	r0, [pc, #372]	; (8000e20 <configAudio+0x1dc>)
 8000caa:	f001 ff8b 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x32;
 8000cae:	2332      	movs	r3, #50	; 0x32
 8000cb0:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000cb6:	1d3a      	adds	r2, r7, #4
 8000cb8:	2364      	movs	r3, #100	; 0x64
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	2194      	movs	r1, #148	; 0x94
 8000cc0:	4857      	ldr	r0, [pc, #348]	; (8000e20 <configAudio+0x1dc>)
 8000cc2:	f001 ff7f 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x00;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000cce:	1d3a      	adds	r2, r7, #4
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	2194      	movs	r1, #148	; 0x94
 8000cd8:	4851      	ldr	r0, [pc, #324]	; (8000e20 <configAudio+0x1dc>)
 8000cda:	f001 ff73 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	/** Ctl registers configuration **/
	bytes[0] = 0x04;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0xAF;
 8000ce2:	23af      	movs	r3, #175	; 0xaf
 8000ce4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000ce6:	1d3a      	adds	r2, r7, #4
 8000ce8:	2364      	movs	r3, #100	; 0x64
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2302      	movs	r3, #2
 8000cee:	2194      	movs	r1, #148	; 0x94
 8000cf0:	484b      	ldr	r0, [pc, #300]	; (8000e20 <configAudio+0x1dc>)
 8000cf2:	f001 ff67 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x0D;
 8000cf6:	230d      	movs	r3, #13
 8000cf8:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x70;
 8000cfa:	2370      	movs	r3, #112	; 0x70
 8000cfc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000cfe:	1d3a      	adds	r2, r7, #4
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2302      	movs	r3, #2
 8000d06:	2194      	movs	r1, #148	; 0x94
 8000d08:	4845      	ldr	r0, [pc, #276]	; (8000e20 <configAudio+0x1dc>)
 8000d0a:	f001 ff5b 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x05;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x81;
 8000d12:	2381      	movs	r3, #129	; 0x81
 8000d14:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000d16:	1d3a      	adds	r2, r7, #4
 8000d18:	2364      	movs	r3, #100	; 0x64
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	2194      	movs	r1, #148	; 0x94
 8000d20:	483f      	ldr	r0, [pc, #252]	; (8000e20 <configAudio+0x1dc>)
 8000d22:	f001 ff4f 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x06;
 8000d26:	2306      	movs	r3, #6
 8000d28:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x07;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000d2e:	1d3a      	adds	r2, r7, #4
 8000d30:	2364      	movs	r3, #100	; 0x64
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2302      	movs	r3, #2
 8000d36:	2194      	movs	r1, #148	; 0x94
 8000d38:	4839      	ldr	r0, [pc, #228]	; (8000e20 <configAudio+0x1dc>)
 8000d3a:	f001 ff43 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x0A;
 8000d3e:	230a      	movs	r3, #10
 8000d40:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000d46:	1d3a      	adds	r2, r7, #4
 8000d48:	2364      	movs	r3, #100	; 0x64
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	2194      	movs	r1, #148	; 0x94
 8000d50:	4833      	ldr	r0, [pc, #204]	; (8000e20 <configAudio+0x1dc>)
 8000d52:	f001 ff37 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x27;
 8000d56:	2327      	movs	r3, #39	; 0x27
 8000d58:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000d5e:	1d3a      	adds	r2, r7, #4
 8000d60:	2364      	movs	r3, #100	; 0x64
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2302      	movs	r3, #2
 8000d66:	2194      	movs	r1, #148	; 0x94
 8000d68:	482d      	ldr	r0, [pc, #180]	; (8000e20 <configAudio+0x1dc>)
 8000d6a:	f001 ff2b 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x1F;
 8000d6e:	231f      	movs	r3, #31
 8000d70:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x0F;
 8000d72:	230f      	movs	r3, #15
 8000d74:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000d76:	1d3a      	adds	r2, r7, #4
 8000d78:	2364      	movs	r3, #100	; 0x64
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	2194      	movs	r1, #148	; 0x94
 8000d80:	4827      	ldr	r0, [pc, #156]	; (8000e20 <configAudio+0x1dc>)
 8000d82:	f001 ff1f 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x22;
 8000d86:	2322      	movs	r3, #34	; 0x22
 8000d88:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0xC0;
 8000d8a:	23c0      	movs	r3, #192	; 0xc0
 8000d8c:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000d8e:	1d3a      	adds	r2, r7, #4
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2302      	movs	r3, #2
 8000d96:	2194      	movs	r1, #148	; 0x94
 8000d98:	4821      	ldr	r0, [pc, #132]	; (8000e20 <configAudio+0x1dc>)
 8000d9a:	f001 ff13 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x14;
 8000d9e:	2314      	movs	r3, #20
 8000da0:	713b      	strb	r3, [r7, #4]
	bytes[1] = 2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000da6:	1d3a      	adds	r2, r7, #4
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2302      	movs	r3, #2
 8000dae:	2194      	movs	r1, #148	; 0x94
 8000db0:	481b      	ldr	r0, [pc, #108]	; (8000e20 <configAudio+0x1dc>)
 8000db2:	f001 ff07 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x15;
 8000db6:	2315      	movs	r3, #21
 8000db8:	713b      	strb	r3, [r7, #4]
	bytes[1] = 2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000dbe:	1d3a      	adds	r2, r7, #4
 8000dc0:	2364      	movs	r3, #100	; 0x64
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	2194      	movs	r1, #148	; 0x94
 8000dc8:	4815      	ldr	r0, [pc, #84]	; (8000e20 <configAudio+0x1dc>)
 8000dca:	f001 fefb 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x20;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	713b      	strb	r3, [r7, #4]
	bytes[1] = 24;
 8000dd2:	2318      	movs	r3, #24
 8000dd4:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000dd6:	1d3a      	adds	r2, r7, #4
 8000dd8:	2364      	movs	r3, #100	; 0x64
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2302      	movs	r3, #2
 8000dde:	2194      	movs	r1, #148	; 0x94
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <configAudio+0x1dc>)
 8000de2:	f001 feef 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	bytes[0] = 0x21;
 8000de6:	2321      	movs	r3, #33	; 0x21
 8000de8:	713b      	strb	r3, [r7, #4]
	bytes[1] = 24;
 8000dea:	2318      	movs	r3, #24
 8000dec:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000dee:	1d3a      	adds	r2, r7, #4
 8000df0:	2364      	movs	r3, #100	; 0x64
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2302      	movs	r3, #2
 8000df6:	2194      	movs	r1, #148	; 0x94
 8000df8:	4809      	ldr	r0, [pc, #36]	; (8000e20 <configAudio+0x1dc>)
 8000dfa:	f001 fee3 	bl	8002bc4 <HAL_I2C_Master_Transmit>

	/**  Power up **/
	bytes[0] = 0x02;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	713b      	strb	r3, [r7, #4]
	bytes[1] = 0x9E;
 8000e02:	239e      	movs	r3, #158	; 0x9e
 8000e04:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000e06:	1d3a      	adds	r2, r7, #4
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	2194      	movs	r1, #148	; 0x94
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <configAudio+0x1dc>)
 8000e12:	f001 fed7 	bl	8002bc4 <HAL_I2C_Master_Transmit>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200019d0 	.word	0x200019d0

08000e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_DMA_Init+0x3c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <MX_DMA_Init+0x3c>)
 8000e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_DMA_Init+0x3c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2010      	movs	r0, #16
 8000e4c:	f000 ff79 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e50:	2010      	movs	r0, #16
 8000e52:	f000 ff92 	bl	8001d7a <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a34      	ldr	r2, [pc, #208]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a26      	ldr	r2, [pc, #152]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_GPIO_Init+0xf0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|CS43L22_Reset_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f248 0110 	movw	r1, #32784	; 0x8010
 8000f0c:	4812      	ldr	r0, [pc, #72]	; (8000f58 <MX_GPIO_Init+0xf4>)
 8000f0e:	f001 fcfb 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480b      	ldr	r0, [pc, #44]	; (8000f58 <MX_GPIO_Init+0xf4>)
 8000f2c:	f001 fb50 	bl	80025d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS43L22_Reset_Pin;
 8000f30:	2310      	movs	r3, #16
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS43L22_Reset_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_GPIO_Init+0xf4>)
 8000f48:	f001 fb42 	bl	80025d0 <HAL_GPIO_Init>

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f62:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <MX_I2C1_Init+0x54>)
 8000f64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <MX_I2C1_Init+0x58>)
 8000f6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_I2C1_Init+0x50>)
 8000f9a:	f001 fccf 	bl	800293c <HAL_I2C_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa4:	f000 fac8 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200019d0 	.word	0x200019d0
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	000186a0 	.word	0x000186a0

08000fb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_I2C_MspInit+0x84>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d12c      	bne.n	8001034 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_I2C_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_I2C_MspInit+0x88>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_I2C_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000ff6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001008:	2304      	movs	r3, #4
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <HAL_I2C_MspInit+0x8c>)
 8001014:	f001 fadc 	bl	80025d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HAL_I2C_MspInit+0x88>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_I2C_MspInit+0x88>)
 8001022:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_I2C_MspInit+0x88>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40005400 	.word	0x40005400
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400

08001048 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_I2S3_Init+0x54>)
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <MX_I2S3_Init+0x58>)
 8001050:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_I2S3_Init+0x54>)
 8001054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001058:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_I2S3_Init+0x54>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_I2S3_Init+0x54>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <MX_I2S3_Init+0x54>)
 8001068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_I2S3_Init+0x54>)
 8001070:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001074:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_I2S3_Init+0x54>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_I2S3_Init+0x54>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_I2S3_Init+0x54>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_I2S3_Init+0x54>)
 800108a:	f002 f8a3 	bl	80031d4 <HAL_I2S_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001094:	f000 fa50 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20001a84 	.word	0x20001a84
 80010a0:	40003c00 	.word	0x40003c00

080010a4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	; 0x38
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <HAL_I2S_MspInit+0x164>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	f040 8094 	bne.w	80011fe <HAL_I2S_MspInit+0x15a>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010d6:	2301      	movs	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010da:	23c0      	movs	r3, #192	; 0xc0
 80010dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fca2 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80010f2:	f000 fa21 	bl	8001538 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b44      	ldr	r3, [pc, #272]	; (800120c <HAL_I2S_MspInit+0x168>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a43      	ldr	r2, [pc, #268]	; (800120c <HAL_I2S_MspInit+0x168>)
 8001100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <HAL_I2S_MspInit+0x168>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <HAL_I2S_MspInit+0x168>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a3c      	ldr	r2, [pc, #240]	; (800120c <HAL_I2S_MspInit+0x168>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_I2S_MspInit+0x168>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_I2S_MspInit+0x168>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a35      	ldr	r2, [pc, #212]	; (800120c <HAL_I2S_MspInit+0x168>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <HAL_I2S_MspInit+0x168>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114a:	2310      	movs	r3, #16
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800115a:	2306      	movs	r3, #6
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	4619      	mov	r1, r3
 8001164:	482a      	ldr	r0, [pc, #168]	; (8001210 <HAL_I2S_MspInit+0x16c>)
 8001166:	f001 fa33 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800116a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800117c:	2306      	movs	r3, #6
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4823      	ldr	r0, [pc, #140]	; (8001214 <HAL_I2S_MspInit+0x170>)
 8001188:	f001 fa22 	bl	80025d0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <HAL_I2S_MspInit+0x174>)
 800118e:	4a23      	ldr	r2, [pc, #140]	; (800121c <HAL_I2S_MspInit+0x178>)
 8001190:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <HAL_I2S_MspInit+0x174>)
 8001194:	2200      	movs	r2, #0
 8001196:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <HAL_I2S_MspInit+0x174>)
 800119a:	2240      	movs	r2, #64	; 0x40
 800119c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011aa:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b2:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ba:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c2:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011d2:	2203      	movs	r2, #3
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011d8:	2200      	movs	r2, #0
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011de:	2200      	movs	r2, #0
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011e4:	f000 fdf2 	bl	8001dcc <HAL_DMA_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 80011ee:	f000 f9a3 	bl	8001538 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_I2S_MspInit+0x174>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40003c00 	.word	0x40003c00
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020800 	.word	0x40020800
 8001218:	20001a24 	.word	0x20001a24
 800121c:	40026088 	.word	0x40026088

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char c;
	int tone_state[TONE_NUMBER] = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2230      	movs	r2, #48	; 0x30
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f004 fbcb 	bl	80059c8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f000 fc15 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f915 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123a:	f7ff fe13 	bl	8000e64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800123e:	f000 faed 	bl	800181c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001242:	f7ff fe8b 	bl	8000f5c <MX_I2C1_Init>
  MX_DMA_Init();
 8001246:	f7ff fded 	bl	8000e24 <MX_DMA_Init>
  MX_I2S3_Init();
 800124a:	f7ff fefd 	bl	8001048 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  configAudio();
 800124e:	f7ff fcf9 	bl	8000c44 <configAudio>
  generateSignals();
 8001252:	f000 f977 	bl	8001544 <generateSignals>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ( USART2_Dequeue(&c) != 0) {
 8001256:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fba2 	bl	80019a4 <USART2_Dequeue>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d06e      	beq.n	8001344 <main+0x124>
		  if(c=='a'){
 8001266:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800126a:	2b61      	cmp	r3, #97	; 0x61
 800126c:	d104      	bne.n	8001278 <main+0x58>
			  tone_state[TON_C]^=1;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f083 0301 	eor.w	r3, r3, #1
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	e065      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='w'){
 8001278:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800127c:	2b77      	cmp	r3, #119	; 0x77
 800127e:	d104      	bne.n	800128a <main+0x6a>
			  tone_state[TON_C_SHARP]^=1;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f083 0301 	eor.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	e05c      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='s'){
 800128a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800128e:	2b73      	cmp	r3, #115	; 0x73
 8001290:	d104      	bne.n	800129c <main+0x7c>
			  tone_state[TON_D]^=1;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f083 0301 	eor.w	r3, r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e053      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='e'){
 800129c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012a0:	2b65      	cmp	r3, #101	; 0x65
 80012a2:	d104      	bne.n	80012ae <main+0x8e>
			  tone_state[TON_D_SHARP]^=1;
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	e04a      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='d'){
 80012ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d104      	bne.n	80012c0 <main+0xa0>
			  tone_state[TON_E]^=1;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f083 0301 	eor.w	r3, r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e041      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='f'){
 80012c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012c4:	2b66      	cmp	r3, #102	; 0x66
 80012c6:	d104      	bne.n	80012d2 <main+0xb2>
			  tone_state[TON_F]^=1;
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	f083 0301 	eor.w	r3, r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	e038      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='t'){
 80012d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012d6:	2b74      	cmp	r3, #116	; 0x74
 80012d8:	d104      	bne.n	80012e4 <main+0xc4>
			  tone_state[TON_F_SHARP]^=1;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e02f      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='g'){
 80012e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012e8:	2b67      	cmp	r3, #103	; 0x67
 80012ea:	d104      	bne.n	80012f6 <main+0xd6>
			  tone_state[TON_G]^=1;
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	e026      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='y' || c=='z'){
 80012f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012fa:	2b79      	cmp	r3, #121	; 0x79
 80012fc:	d003      	beq.n	8001306 <main+0xe6>
 80012fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001302:	2b7a      	cmp	r3, #122	; 0x7a
 8001304:	d104      	bne.n	8001310 <main+0xf0>
			  tone_state[TON_G_SHARP]^=1;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	f083 0301 	eor.w	r3, r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	e019      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='h'){
 8001310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001314:	2b68      	cmp	r3, #104	; 0x68
 8001316:	d104      	bne.n	8001322 <main+0x102>
			  tone_state[TON_A]^=1;
 8001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131a:	f083 0301 	eor.w	r3, r3, #1
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001320:	e010      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='u'){
 8001322:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001326:	2b75      	cmp	r3, #117	; 0x75
 8001328:	d104      	bne.n	8001334 <main+0x114>
			  tone_state[TON_A_SHARP]^=1;
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	f083 0301 	eor.w	r3, r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001332:	e007      	b.n	8001344 <main+0x124>
		  }
		  else if(c=='j'){
 8001334:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001338:	2b6a      	cmp	r3, #106	; 0x6a
 800133a:	d103      	bne.n	8001344 <main+0x124>
			  tone_state[TON_H]^=1;
 800133c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133e:	f083 0301 	eor.w	r3, r3, #1
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
		  }
	  }

	  if (tone_state[TON_C] == 1) {
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d106      	bne.n	8001358 <main+0x138>
		  HAL_I2S_Transmit_DMA(&hi2s3, C, 2*C_SAMPLES);
 800134a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800134e:	4939      	ldr	r1, [pc, #228]	; (8001434 <main+0x214>)
 8001350:	4839      	ldr	r0, [pc, #228]	; (8001438 <main+0x218>)
 8001352:	f002 f87f 	bl	8003454 <HAL_I2S_Transmit_DMA>
 8001356:	e77e      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_C_SHARP] == 1) {
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d106      	bne.n	800136c <main+0x14c>
		  HAL_I2S_Transmit_DMA(&hi2s3, C_SHARP, 2*C_SHARP_SAMPLES);
 800135e:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8001362:	4936      	ldr	r1, [pc, #216]	; (800143c <main+0x21c>)
 8001364:	4834      	ldr	r0, [pc, #208]	; (8001438 <main+0x218>)
 8001366:	f002 f875 	bl	8003454 <HAL_I2S_Transmit_DMA>
 800136a:	e774      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_D] == 1) {
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d106      	bne.n	8001380 <main+0x160>
		  HAL_I2S_Transmit_DMA(&hi2s3, D, 2*D_SAMPLES);
 8001372:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8001376:	4932      	ldr	r1, [pc, #200]	; (8001440 <main+0x220>)
 8001378:	482f      	ldr	r0, [pc, #188]	; (8001438 <main+0x218>)
 800137a:	f002 f86b 	bl	8003454 <HAL_I2S_Transmit_DMA>
 800137e:	e76a      	b.n	8001256 <main+0x36>
	  }	else if (tone_state[TON_D_SHARP] == 1) {
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d106      	bne.n	8001394 <main+0x174>
		  HAL_I2S_Transmit_DMA(&hi2s3, D_SHARP, 2*D_SHARP_SAMPLES);
 8001386:	f44f 729b 	mov.w	r2, #310	; 0x136
 800138a:	492e      	ldr	r1, [pc, #184]	; (8001444 <main+0x224>)
 800138c:	482a      	ldr	r0, [pc, #168]	; (8001438 <main+0x218>)
 800138e:	f002 f861 	bl	8003454 <HAL_I2S_Transmit_DMA>
 8001392:	e760      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_E] == 1) {
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d106      	bne.n	80013a8 <main+0x188>
		  HAL_I2S_Transmit_DMA(&hi2s3, E, 2*E_SAMPLES);
 800139a:	f44f 7292 	mov.w	r2, #292	; 0x124
 800139e:	492a      	ldr	r1, [pc, #168]	; (8001448 <main+0x228>)
 80013a0:	4825      	ldr	r0, [pc, #148]	; (8001438 <main+0x218>)
 80013a2:	f002 f857 	bl	8003454 <HAL_I2S_Transmit_DMA>
 80013a6:	e756      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_F] == 1) {
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d106      	bne.n	80013bc <main+0x19c>
		  HAL_I2S_Transmit_DMA(&hi2s3, F, 2*F_SAMPLES);
 80013ae:	f44f 728a 	mov.w	r2, #276	; 0x114
 80013b2:	4926      	ldr	r1, [pc, #152]	; (800144c <main+0x22c>)
 80013b4:	4820      	ldr	r0, [pc, #128]	; (8001438 <main+0x218>)
 80013b6:	f002 f84d 	bl	8003454 <HAL_I2S_Transmit_DMA>
 80013ba:	e74c      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_F_SHARP] == 1) {
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d106      	bne.n	80013d0 <main+0x1b0>
		  HAL_I2S_Transmit_DMA(&hi2s3, F_SHARP, 2*F_SHARP_SAMPLES);
 80013c2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c6:	4922      	ldr	r1, [pc, #136]	; (8001450 <main+0x230>)
 80013c8:	481b      	ldr	r0, [pc, #108]	; (8001438 <main+0x218>)
 80013ca:	f002 f843 	bl	8003454 <HAL_I2S_Transmit_DMA>
 80013ce:	e742      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_G] == 1) {
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d105      	bne.n	80013e2 <main+0x1c2>
		  HAL_I2S_Transmit_DMA(&hi2s3, C, 2*G_SAMPLES);
 80013d6:	22f6      	movs	r2, #246	; 0xf6
 80013d8:	4916      	ldr	r1, [pc, #88]	; (8001434 <main+0x214>)
 80013da:	4817      	ldr	r0, [pc, #92]	; (8001438 <main+0x218>)
 80013dc:	f002 f83a 	bl	8003454 <HAL_I2S_Transmit_DMA>
 80013e0:	e739      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_G_SHARP] == 1) {
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <main+0x1d4>
		  HAL_I2S_Transmit_DMA(&hi2s3, G_SHARP, 2*G_SHARP_SAMPLES);
 80013e8:	22e8      	movs	r2, #232	; 0xe8
 80013ea:	491a      	ldr	r1, [pc, #104]	; (8001454 <main+0x234>)
 80013ec:	4812      	ldr	r0, [pc, #72]	; (8001438 <main+0x218>)
 80013ee:	f002 f831 	bl	8003454 <HAL_I2S_Transmit_DMA>
 80013f2:	e730      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_A] == 1) {
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d105      	bne.n	8001406 <main+0x1e6>
		  HAL_I2S_Transmit_DMA(&hi2s3, A, 2*A_SAMPLES);
 80013fa:	22dc      	movs	r2, #220	; 0xdc
 80013fc:	4916      	ldr	r1, [pc, #88]	; (8001458 <main+0x238>)
 80013fe:	480e      	ldr	r0, [pc, #56]	; (8001438 <main+0x218>)
 8001400:	f002 f828 	bl	8003454 <HAL_I2S_Transmit_DMA>
 8001404:	e727      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_A_SHARP] == 1) {
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	2b01      	cmp	r3, #1
 800140a:	d105      	bne.n	8001418 <main+0x1f8>
		  HAL_I2S_Transmit_DMA(&hi2s3, A_SHARP, 2*A_SHARP_SAMPLES);
 800140c:	22ce      	movs	r2, #206	; 0xce
 800140e:	4913      	ldr	r1, [pc, #76]	; (800145c <main+0x23c>)
 8001410:	4809      	ldr	r0, [pc, #36]	; (8001438 <main+0x218>)
 8001412:	f002 f81f 	bl	8003454 <HAL_I2S_Transmit_DMA>
 8001416:	e71e      	b.n	8001256 <main+0x36>
	  } else if (tone_state[TON_H] == 1) {
 8001418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141a:	2b01      	cmp	r3, #1
 800141c:	d105      	bne.n	800142a <main+0x20a>
		  HAL_I2S_Transmit_DMA(&hi2s3, H, 2*H_SAMPLES);
 800141e:	22c4      	movs	r2, #196	; 0xc4
 8001420:	490f      	ldr	r1, [pc, #60]	; (8001460 <main+0x240>)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <main+0x218>)
 8001424:	f002 f816 	bl	8003454 <HAL_I2S_Transmit_DMA>
 8001428:	e715      	b.n	8001256 <main+0x36>
	  } else {
		  HAL_I2S_DMAStop(&hi2s3);
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <main+0x218>)
 800142c:	f002 f8ba 	bl	80035a4 <HAL_I2S_DMAStop>
	  if ( USART2_Dequeue(&c) != 0) {
 8001430:	e711      	b.n	8001256 <main+0x36>
 8001432:	bf00      	nop
 8001434:	20000028 	.word	0x20000028
 8001438:	20001a84 	.word	0x20001a84
 800143c:	20000308 	.word	0x20000308
 8001440:	200005c0 	.word	0x200005c0
 8001444:	20000850 	.word	0x20000850
 8001448:	20000abc 	.word	0x20000abc
 800144c:	20000d04 	.word	0x20000d04
 8001450:	20000f2c 	.word	0x20000f2c
 8001454:	20001320 	.word	0x20001320
 8001458:	200014f0 	.word	0x200014f0
 800145c:	200016a8 	.word	0x200016a8
 8001460:	20001844 	.word	0x20001844

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	; 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	; 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f004 faa8 	bl	80059c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <SystemClock_Config+0xcc>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a27      	ldr	r2, [pc, #156]	; (8001530 <SystemClock_Config+0xcc>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <SystemClock_Config+0xcc>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <SystemClock_Config+0xd0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a21      	ldr	r2, [pc, #132]	; (8001534 <SystemClock_Config+0xd0>)
 80014ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <SystemClock_Config+0xd0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	2302      	movs	r3, #2
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014d4:	2304      	movs	r3, #4
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014d8:	23a8      	movs	r3, #168	; 0xa8
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014e0:	2304      	movs	r3, #4
 80014e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fe2d 	bl	8004148 <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f4:	f000 f820 	bl	8001538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001504:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001508:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2105      	movs	r1, #5
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f88e 	bl	8004638 <HAL_RCC_ClockConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001522:	f000 f809 	bl	8001538 <Error_Handler>
  }
}
 8001526:	bf00      	nop
 8001528:	3750      	adds	r7, #80	; 0x50
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <generateSignals>:
uint16_t A_SHARP[206] = {0};
uint16_t H[196] = {0};

void sampling(float frequency, int samples, uint16_t *signal_array);

void generateSignals() {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	sampling(FREQ_C, C_SAMPLES, C);
 8001548:	4924      	ldr	r1, [pc, #144]	; (80015dc <generateSignals+0x98>)
 800154a:	20b8      	movs	r0, #184	; 0xb8
 800154c:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80015e0 <generateSignals+0x9c>
 8001550:	f000 f876 	bl	8001640 <sampling>
	sampling(FREQ_C_SHARP, C_SHARP_SAMPLES, C_SHARP);
 8001554:	4923      	ldr	r1, [pc, #140]	; (80015e4 <generateSignals+0xa0>)
 8001556:	20ae      	movs	r0, #174	; 0xae
 8001558:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80015e8 <generateSignals+0xa4>
 800155c:	f000 f870 	bl	8001640 <sampling>
	sampling(FREQ_D, D_SAMPLES, D);
 8001560:	4922      	ldr	r1, [pc, #136]	; (80015ec <generateSignals+0xa8>)
 8001562:	20a4      	movs	r0, #164	; 0xa4
 8001564:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80015f0 <generateSignals+0xac>
 8001568:	f000 f86a 	bl	8001640 <sampling>
	sampling(FREQ_D_SHARP, D_SHARP_SAMPLES, D_SHARP);
 800156c:	4921      	ldr	r1, [pc, #132]	; (80015f4 <generateSignals+0xb0>)
 800156e:	209b      	movs	r0, #155	; 0x9b
 8001570:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80015f8 <generateSignals+0xb4>
 8001574:	f000 f864 	bl	8001640 <sampling>
	sampling(FREQ_E, E_SAMPLES, E);
 8001578:	4920      	ldr	r1, [pc, #128]	; (80015fc <generateSignals+0xb8>)
 800157a:	2092      	movs	r0, #146	; 0x92
 800157c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001600 <generateSignals+0xbc>
 8001580:	f000 f85e 	bl	8001640 <sampling>
	sampling(FREQ_F, F_SAMPLES, F);
 8001584:	491f      	ldr	r1, [pc, #124]	; (8001604 <generateSignals+0xc0>)
 8001586:	208a      	movs	r0, #138	; 0x8a
 8001588:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001608 <generateSignals+0xc4>
 800158c:	f000 f858 	bl	8001640 <sampling>
	sampling(FREQ_F_SHARP, F_SHARP_SAMPLES, F_SHARP);
 8001590:	491e      	ldr	r1, [pc, #120]	; (800160c <generateSignals+0xc8>)
 8001592:	2082      	movs	r0, #130	; 0x82
 8001594:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001610 <generateSignals+0xcc>
 8001598:	f000 f852 	bl	8001640 <sampling>
	sampling(FREQ_G, G_SAMPLES, G);
 800159c:	491d      	ldr	r1, [pc, #116]	; (8001614 <generateSignals+0xd0>)
 800159e:	207b      	movs	r0, #123	; 0x7b
 80015a0:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001618 <generateSignals+0xd4>
 80015a4:	f000 f84c 	bl	8001640 <sampling>
	sampling(FREQ_G_SHARP, G_SHARP_SAMPLES, G_SHARP);
 80015a8:	491c      	ldr	r1, [pc, #112]	; (800161c <generateSignals+0xd8>)
 80015aa:	2074      	movs	r0, #116	; 0x74
 80015ac:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001620 <generateSignals+0xdc>
 80015b0:	f000 f846 	bl	8001640 <sampling>
	sampling(FREQ_A, A_SAMPLES, A);
 80015b4:	491b      	ldr	r1, [pc, #108]	; (8001624 <generateSignals+0xe0>)
 80015b6:	206e      	movs	r0, #110	; 0x6e
 80015b8:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001628 <generateSignals+0xe4>
 80015bc:	f000 f840 	bl	8001640 <sampling>
	sampling(FREQ_A_SHARP, A_SHARP_SAMPLES, A_SHARP);
 80015c0:	491a      	ldr	r1, [pc, #104]	; (800162c <generateSignals+0xe8>)
 80015c2:	2067      	movs	r0, #103	; 0x67
 80015c4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001630 <generateSignals+0xec>
 80015c8:	f000 f83a 	bl	8001640 <sampling>
	sampling(FREQ_H, H_SAMPLES, H);
 80015cc:	4919      	ldr	r1, [pc, #100]	; (8001634 <generateSignals+0xf0>)
 80015ce:	2062      	movs	r0, #98	; 0x62
 80015d0:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001638 <generateSignals+0xf4>
 80015d4:	f000 f834 	bl	8001640 <sampling>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000028 	.word	0x20000028
 80015e0:	4382d0a4 	.word	0x4382d0a4
 80015e4:	20000308 	.word	0x20000308
 80015e8:	438a970a 	.word	0x438a970a
 80015ec:	200005c0 	.word	0x200005c0
 80015f0:	4392d47b 	.word	0x4392d47b
 80015f4:	20000850 	.word	0x20000850
 80015f8:	439b90a4 	.word	0x439b90a4
 80015fc:	20000abc 	.word	0x20000abc
 8001600:	43a4d0a4 	.word	0x43a4d0a4
 8001604:	20000d04 	.word	0x20000d04
 8001608:	43ae9d71 	.word	0x43ae9d71
 800160c:	20000f2c 	.word	0x20000f2c
 8001610:	43b8feb8 	.word	0x43b8feb8
 8001614:	20001134 	.word	0x20001134
 8001618:	43c40000 	.word	0x43c40000
 800161c:	20001320 	.word	0x20001320
 8001620:	43cfa666 	.word	0x43cfa666
 8001624:	200014f0 	.word	0x200014f0
 8001628:	43dc0000 	.word	0x43dc0000
 800162c:	200016a8 	.word	0x200016a8
 8001630:	43e9147b 	.word	0x43e9147b
 8001634:	20001844 	.word	0x20001844
 8001638:	43f6f0a4 	.word	0x43f6f0a4
 800163c:	00000000 	.word	0x00000000

08001640 <sampling>:

void sampling(float frequency, int samples, uint16_t *signal_array) {
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	ed87 0a03 	vstr	s0, [r7, #12]
 800164a:	60b8      	str	r0, [r7, #8]
 800164c:	6079      	str	r1, [r7, #4]
	for (int i = 0; i < samples; i+=2) {
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e053      	b.n	80016fc <sampling+0xbc>
		signal_array[i] = (uint16_t) 65535*sin(2*M_PI*frequency*i*(1/SAMPLE_FREQUENCY)) + 32767;
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff f845 	bl	80006e4 <__aeabi_f2d>
 800165a:	a32d      	add	r3, pc, #180	; (adr r3, 8001710 <sampling+0xd0>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe fdb2 	bl	80001c8 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4614      	mov	r4, r2
 800166a:	461d      	mov	r5, r3
 800166c:	6978      	ldr	r0, [r7, #20]
 800166e:	f7ff f827 	bl	80006c0 <__aeabi_i2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe fda5 	bl	80001c8 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f7fe fd9b 	bl	80001c8 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	ec43 2b17 	vmov	d7, r2, r3
 800169a:	eeb0 0a47 	vmov.f32	s0, s14
 800169e:	eef0 0a67 	vmov.f32	s1, s15
 80016a2:	f004 f999 	bl	80059d8 <sin>
 80016a6:	ec51 0b10 	vmov	r0, r1, d0
 80016aa:	a31b      	add	r3, pc, #108	; (adr r3, 8001718 <sampling+0xd8>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7fe fd8a 	bl	80001c8 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	a318      	add	r3, pc, #96	; (adr r3, 8001720 <sampling+0xe0>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	f7fe feb1 	bl	8000428 <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	18d4      	adds	r4, r2, r3
 80016d6:	f7ff f90d 	bl	80008f4 <__aeabi_d2uiz>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29b      	uxth	r3, r3
 80016de:	8023      	strh	r3, [r4, #0]
		signal_array[i+1] = (uint16_t) signal_array[i];
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	441a      	add	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	440b      	add	r3, r1
 80016f2:	8812      	ldrh	r2, [r2, #0]
 80016f4:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < samples; i+=2) {
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3302      	adds	r3, #2
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	429a      	cmp	r2, r3
 8001702:	dba7      	blt.n	8001654 <sampling+0x14>
	}
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	54442d18 	.word	0x54442d18
 8001714:	401921fb 	.word	0x401921fb
 8001718:	00000000 	.word	0x00000000
 800171c:	40efffe0 	.word	0x40efffe0
 8001720:	00000000 	.word	0x00000000
 8001724:	40dfffc0 	.word	0x40dfffc0

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <HAL_MspInit+0x4c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_MspInit+0x4c>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800177c:	e7fe      	b.n	800177c <NMI_Handler+0x4>

0800177e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <HardFault_Handler+0x4>

08001784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler+0x4>

0800178a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <BusFault_Handler+0x4>

08001790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <UsageFault_Handler+0x4>

08001796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c4:	f000 f99e 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <DMA1_Stream5_IRQHandler+0x10>)
 80017d2:	f000 fc93 	bl	80020fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20001a24 	.word	0x20001a24

080017e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <USART2_IRQHandler+0x14>)
 80017e6:	f003 fab1 	bl	8004d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 80017ea:	4802      	ldr	r0, [pc, #8]	; (80017f4 <USART2_IRQHandler+0x14>)
 80017ec:	f000 f898 	bl	8001920 <USER_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20001ae8 	.word	0x20001ae8

080017f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <SystemInit+0x20>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <SystemInit+0x20>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 8001822:	4a16      	ldr	r2, [pc, #88]	; (800187c <MX_USART2_UART_Init+0x60>)
 8001824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001852:	4809      	ldr	r0, [pc, #36]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 8001854:	f003 fa2c 	bl	8004cb0 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185e:	f7ff fe6b 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <MX_USART2_UART_Init+0x5c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0220 	orr.w	r2, r2, #32
 8001870:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20001ae8 	.word	0x20001ae8
 800187c:	40004400 	.word	0x40004400

08001880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_UART_MspInit+0x94>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d133      	bne.n	800190a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018da:	230c      	movs	r3, #12
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ea:	2307      	movs	r3, #7
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <HAL_UART_MspInit+0x9c>)
 80018f6:	f000 fe6b 	bl	80025d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2026      	movs	r0, #38	; 0x26
 8001900:	f000 fa1f 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001904:	2026      	movs	r0, #38	; 0x26
 8001906:	f000 fa38 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40004400 	.word	0x40004400
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000

08001920 <USER_UART_IRQHandler>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART2) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <USER_UART_IRQHandler+0x6c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d105      	bne.n	800193e <USER_UART_IRQHandler+0x1e>
		rx_data = __HAL_UART_FLUSH_DRREGISTER( huart );
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <USER_UART_IRQHandler+0x70>)
 800193c:	701a      	strb	r2, [r3, #0]
	}

	static char rx_head;
	rx_head = RX_BUFFER_HEAD + 1;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <USER_UART_IRQHandler+0x74>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <USER_UART_IRQHandler+0x78>)
 800194a:	701a      	strb	r2, [r3, #0]
	if (rx_head == BUFSIZE) {
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <USER_UART_IRQHandler+0x78>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b10      	cmp	r3, #16
 8001952:	d102      	bne.n	800195a <USER_UART_IRQHandler+0x3a>
		rx_head = 0;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <USER_UART_IRQHandler+0x78>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
	}
	if (rx_head != RX_BUFFER_TAIL) {
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <USER_UART_IRQHandler+0x78>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <USER_UART_IRQHandler+0x7c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d00a      	beq.n	800197e <USER_UART_IRQHandler+0x5e>
		RX_BUFFER[RX_BUFFER_HEAD] = rx_data;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <USER_UART_IRQHandler+0x74>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a08      	ldr	r2, [pc, #32]	; (8001990 <USER_UART_IRQHandler+0x70>)
 800196e:	7811      	ldrb	r1, [r2, #0]
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <USER_UART_IRQHandler+0x80>)
 8001972:	54d1      	strb	r1, [r2, r3]
		RX_BUFFER_HEAD = rx_head;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <USER_UART_IRQHandler+0x78>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <USER_UART_IRQHandler+0x74>)
 800197c:	601a      	str	r2, [r3, #0]
	}
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40004400 	.word	0x40004400
 8001990:	20001ae0 	.word	0x20001ae0
 8001994:	20001adc 	.word	0x20001adc
 8001998:	200019cc 	.word	0x200019cc
 800199c:	20001ae4 	.word	0x20001ae4
 80019a0:	20001acc 	.word	0x20001acc

080019a4 <USART2_Dequeue>:

void USART2_SendChar(uint8_t c) {
	HAL_UART_Transmit(&huart2, &c, sizeof(c), 10);
}

int USART2_Dequeue(char *c) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	int ret;
	ret = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
	*c = 0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80019b6:	2026      	movs	r0, #38	; 0x26
 80019b8:	f000 f9ed 	bl	8001d96 <HAL_NVIC_DisableIRQ>

	if (RX_BUFFER_HEAD != RX_BUFFER_TAIL) {
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <USART2_Dequeue+0x5c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <USART2_Dequeue+0x60>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d013      	beq.n	80019f0 <USART2_Dequeue+0x4c>
		*c = RX_BUFFER[RX_BUFFER_TAIL];
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <USART2_Dequeue+0x60>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <USART2_Dequeue+0x64>)
 80019ce:	5cd2      	ldrb	r2, [r2, r3]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	701a      	strb	r2, [r3, #0]
		RX_BUFFER_TAIL++;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <USART2_Dequeue+0x60>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <USART2_Dequeue+0x60>)
 80019dc:	6013      	str	r3, [r2, #0]

		if (RX_BUFFER_TAIL == BUFSIZE) {
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <USART2_Dequeue+0x60>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d102      	bne.n	80019ec <USART2_Dequeue+0x48>
			RX_BUFFER_TAIL = 0;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <USART2_Dequeue+0x60>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
		}

		ret = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
	}

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019f0:	2026      	movs	r0, #38	; 0x26
 80019f2:	f000 f9c2 	bl	8001d7a <HAL_NVIC_EnableIRQ>
	return ret;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20001adc 	.word	0x20001adc
 8001a04:	20001ae4 	.word	0x20001ae4
 8001a08:	20001acc 	.word	0x20001acc

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a10:	480d      	ldr	r0, [pc, #52]	; (8001a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a12:	490e      	ldr	r1, [pc, #56]	; (8001a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a28:	4c0b      	ldr	r4, [pc, #44]	; (8001a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a36:	f7ff fedf 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f003 ffa1 	bl	8005980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7ff fbef 	bl	8001220 <main>
  bx  lr    
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a50:	08006c68 	.word	0x08006c68
  ldr r2, =_sbss
 8001a54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a58:	20001b30 	.word	0x20001b30

08001a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <HAL_Init+0x40>)
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_Init+0x40>)
 8001a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_Init+0x40>)
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f000 f94f 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	200f      	movs	r0, #15
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff fe48 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f975 	bl	8001db2 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae0:	f000 f92f 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000004 	.word	0x20000004

08001b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20001b2c 	.word	0x20001b2c

08001b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20001b2c 	.word	0x20001b2c

08001b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	f003 0307 	and.w	r3, r3, #7
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db0b      	blt.n	8001bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4907      	ldr	r1, [pc, #28]	; (8001be0 <__NVIC_EnableIRQ+0x38>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db12      	blt.n	8001c1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	490a      	ldr	r1, [pc, #40]	; (8001c28 <__NVIC_DisableIRQ+0x44>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	3320      	adds	r3, #32
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c10:	f3bf 8f4f 	dsb	sy
}
 8001c14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c16:	f3bf 8f6f 	isb	sy
}
 8001c1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff05 	bl	8001b44 <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff1a 	bl	8001b8c <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff0d 	bl	8001ba8 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff1d 	bl	8001be4 <__NVIC_DisableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff94 	bl	8001ce8 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff fea8 	bl	8001b2c <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e099      	b.n	8001f1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e08:	e00f      	b.n	8001e2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0a:	f7ff fe8f 	bl	8001b2c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d908      	bls.n	8001e2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2203      	movs	r2, #3
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e078      	b.n	8001f1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e8      	bne.n	8001e0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <HAL_DMA_Init+0x158>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d107      	bne.n	8001e94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f023 0307 	bic.w	r3, r3, #7
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d117      	bne.n	8001eee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00e      	beq.n	8001eee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fb01 	bl	80024d8 <DMA_CheckFifoParam>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2240      	movs	r2, #64	; 0x40
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eea:	2301      	movs	r3, #1
 8001eec:	e016      	b.n	8001f1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fab8 	bl	800246c <DMA_CalcBaseAndBitshift>
 8001efc:	4603      	mov	r3, r0
 8001efe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	223f      	movs	r2, #63	; 0x3f
 8001f06:	409a      	lsls	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	f010803f 	.word	0xf010803f

08001f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_DMA_Start_IT+0x26>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e040      	b.n	8001fd0 <HAL_DMA_Start_IT+0xa8>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d12f      	bne.n	8001fc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fa4a 	bl	8002410 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	223f      	movs	r2, #63	; 0x3f
 8001f82:	409a      	lsls	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0216 	orr.w	r2, r2, #22
 8001f96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0208 	orr.w	r2, r2, #8
 8001fae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e005      	b.n	8001fce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fe6:	f7ff fda1 	bl	8001b2c <HAL_GetTick>
 8001fea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d008      	beq.n	800200a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2280      	movs	r2, #128	; 0x80
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e052      	b.n	80020b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0216 	bic.w	r2, r2, #22
 8002018:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002028:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <HAL_DMA_Abort+0x62>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0208 	bic.w	r2, r2, #8
 8002048:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205a:	e013      	b.n	8002084 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800205c:	f7ff fd66 	bl	8001b2c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b05      	cmp	r3, #5
 8002068:	d90c      	bls.n	8002084 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2203      	movs	r2, #3
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e015      	b.n	80020b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e4      	bne.n	800205c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	223f      	movs	r2, #63	; 0x3f
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d004      	beq.n	80020d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00c      	b.n	80020f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2205      	movs	r2, #5
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002108:	4b92      	ldr	r3, [pc, #584]	; (8002354 <HAL_DMA_IRQHandler+0x258>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a92      	ldr	r2, [pc, #584]	; (8002358 <HAL_DMA_IRQHandler+0x25c>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0a9b      	lsrs	r3, r3, #10
 8002114:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2208      	movs	r2, #8
 8002128:	409a      	lsls	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01a      	beq.n	8002168 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0204 	bic.w	r2, r2, #4
 800214e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2208      	movs	r2, #8
 8002156:	409a      	lsls	r2, r3
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	2201      	movs	r2, #1
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d012      	beq.n	800219e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2201      	movs	r2, #1
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	2204      	movs	r2, #4
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d012      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00b      	beq.n	80021d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2204      	movs	r2, #4
 80021c2:	409a      	lsls	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021cc:	f043 0204 	orr.w	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	2210      	movs	r2, #16
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d043      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d03c      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	2210      	movs	r2, #16
 80021f8:	409a      	lsls	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d018      	beq.n	800223e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d108      	bne.n	800222c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d024      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
 800222a:	e01f      	b.n	800226c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
 800223c:	e016      	b.n	800226c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0208 	bic.w	r2, r2, #8
 800225a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	2220      	movs	r2, #32
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 808e 	beq.w	800239a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8086 	beq.w	800239a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002292:	2220      	movs	r2, #32
 8002294:	409a      	lsls	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d136      	bne.n	8002314 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0216 	bic.w	r2, r2, #22
 80022b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <HAL_DMA_IRQHandler+0x1da>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0208 	bic.w	r2, r2, #8
 80022e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	223f      	movs	r2, #63	; 0x3f
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002306:	2b00      	cmp	r3, #0
 8002308:	d07d      	beq.n	8002406 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
        }
        return;
 8002312:	e078      	b.n	8002406 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01c      	beq.n	800235c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	2b00      	cmp	r3, #0
 8002336:	d030      	beq.n	800239a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
 8002340:	e02b      	b.n	800239a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d027      	beq.n	800239a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
 8002352:	e022      	b.n	800239a <HAL_DMA_IRQHandler+0x29e>
 8002354:	20000000 	.word	0x20000000
 8002358:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0210 	bic.w	r2, r2, #16
 8002378:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d032      	beq.n	8002408 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d022      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3301      	adds	r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d307      	bcc.n	80023e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f2      	bne.n	80023c6 <HAL_DMA_IRQHandler+0x2ca>
 80023e0:	e000      	b.n	80023e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80023e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
 8002404:	e000      	b.n	8002408 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002406:	bf00      	nop
    }
  }
}
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop

08002410 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800242c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d108      	bne.n	8002450 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800244e:	e007      	b.n	8002460 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3b10      	subs	r3, #16
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <DMA_CalcBaseAndBitshift+0x64>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4413      	add	r3, r2
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d909      	bls.n	80024ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024a2:	f023 0303 	bic.w	r3, r3, #3
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	659a      	str	r2, [r3, #88]	; 0x58
 80024ac:	e007      	b.n	80024be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	aaaaaaab 	.word	0xaaaaaaab
 80024d4:	08006a78 	.word	0x08006a78

080024d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d11f      	bne.n	8002532 <DMA_CheckFifoParam+0x5a>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d856      	bhi.n	80025a6 <DMA_CheckFifoParam+0xce>
 80024f8:	a201      	add	r2, pc, #4	; (adr r2, 8002500 <DMA_CheckFifoParam+0x28>)
 80024fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fe:	bf00      	nop
 8002500:	08002511 	.word	0x08002511
 8002504:	08002523 	.word	0x08002523
 8002508:	08002511 	.word	0x08002511
 800250c:	080025a7 	.word	0x080025a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d046      	beq.n	80025aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002520:	e043      	b.n	80025aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800252a:	d140      	bne.n	80025ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002530:	e03d      	b.n	80025ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253a:	d121      	bne.n	8002580 <DMA_CheckFifoParam+0xa8>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d837      	bhi.n	80025b2 <DMA_CheckFifoParam+0xda>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <DMA_CheckFifoParam+0x70>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	08002559 	.word	0x08002559
 800254c:	0800255f 	.word	0x0800255f
 8002550:	08002559 	.word	0x08002559
 8002554:	08002571 	.word	0x08002571
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	e030      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d025      	beq.n	80025b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256e:	e022      	b.n	80025b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002578:	d11f      	bne.n	80025ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800257e:	e01c      	b.n	80025ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d903      	bls.n	800258e <DMA_CheckFifoParam+0xb6>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d003      	beq.n	8002594 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800258c:	e018      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      break;
 8002592:	e015      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00e      	beq.n	80025be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      break;
 80025a4:	e00b      	b.n	80025be <DMA_CheckFifoParam+0xe6>
      break;
 80025a6:	bf00      	nop
 80025a8:	e00a      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025aa:	bf00      	nop
 80025ac:	e008      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ae:	bf00      	nop
 80025b0:	e006      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025b2:	bf00      	nop
 80025b4:	e004      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025b6:	bf00      	nop
 80025b8:	e002      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ba:	bf00      	nop
 80025bc:	e000      	b.n	80025c0 <DMA_CheckFifoParam+0xe8>
      break;
 80025be:	bf00      	nop
    }
  } 
  
  return status; 
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	e16b      	b.n	80028c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	f040 815a 	bne.w	80028be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d005      	beq.n	8002622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	2b02      	cmp	r3, #2
 8002620:	d130      	bne.n	8002684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 0201 	and.w	r2, r3, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b03      	cmp	r3, #3
 800268e:	d017      	beq.n	80026c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d123      	bne.n	8002714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0203 	and.w	r2, r3, #3
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80b4 	beq.w	80028be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b60      	ldr	r3, [pc, #384]	; (80028dc <HAL_GPIO_Init+0x30c>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a5f      	ldr	r2, [pc, #380]	; (80028dc <HAL_GPIO_Init+0x30c>)
 8002760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <HAL_GPIO_Init+0x30c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002772:	4a5b      	ldr	r2, [pc, #364]	; (80028e0 <HAL_GPIO_Init+0x310>)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3302      	adds	r3, #2
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	220f      	movs	r2, #15
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_GPIO_Init+0x314>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02b      	beq.n	80027f6 <HAL_GPIO_Init+0x226>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a51      	ldr	r2, [pc, #324]	; (80028e8 <HAL_GPIO_Init+0x318>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d025      	beq.n	80027f2 <HAL_GPIO_Init+0x222>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a50      	ldr	r2, [pc, #320]	; (80028ec <HAL_GPIO_Init+0x31c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01f      	beq.n	80027ee <HAL_GPIO_Init+0x21e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4f      	ldr	r2, [pc, #316]	; (80028f0 <HAL_GPIO_Init+0x320>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d019      	beq.n	80027ea <HAL_GPIO_Init+0x21a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4e      	ldr	r2, [pc, #312]	; (80028f4 <HAL_GPIO_Init+0x324>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_GPIO_Init+0x216>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4d      	ldr	r2, [pc, #308]	; (80028f8 <HAL_GPIO_Init+0x328>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00d      	beq.n	80027e2 <HAL_GPIO_Init+0x212>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4c      	ldr	r2, [pc, #304]	; (80028fc <HAL_GPIO_Init+0x32c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <HAL_GPIO_Init+0x20e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <HAL_GPIO_Init+0x330>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <HAL_GPIO_Init+0x20a>
 80027d6:	2307      	movs	r3, #7
 80027d8:	e00e      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027da:	2308      	movs	r3, #8
 80027dc:	e00c      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027de:	2306      	movs	r3, #6
 80027e0:	e00a      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027e2:	2305      	movs	r3, #5
 80027e4:	e008      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027e6:	2304      	movs	r3, #4
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027ea:	2303      	movs	r3, #3
 80027ec:	e004      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027f6:	2300      	movs	r3, #0
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f002 0203 	and.w	r2, r2, #3
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	4093      	lsls	r3, r2
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002808:	4935      	ldr	r1, [pc, #212]	; (80028e0 <HAL_GPIO_Init+0x310>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800283a:	4a32      	ldr	r2, [pc, #200]	; (8002904 <HAL_GPIO_Init+0x334>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002840:	4b30      	ldr	r3, [pc, #192]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_GPIO_Init+0x334>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288e:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b8:	4a12      	ldr	r2, [pc, #72]	; (8002904 <HAL_GPIO_Init+0x334>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	f67f ae90 	bls.w	80025ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40013800 	.word	0x40013800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020c00 	.word	0x40020c00
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40021400 	.word	0x40021400
 80028fc:	40021800 	.word	0x40021800
 8002900:	40021c00 	.word	0x40021c00
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002924:	e003      	b.n	800292e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	041a      	lsls	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e12b      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fb28 	bl	8000fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800298e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800299e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029a0:	f002 f81e 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 80029a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a81      	ldr	r2, [pc, #516]	; (8002bb0 <HAL_I2C_Init+0x274>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d807      	bhi.n	80029c0 <HAL_I2C_Init+0x84>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a80      	ldr	r2, [pc, #512]	; (8002bb4 <HAL_I2C_Init+0x278>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e006      	b.n	80029ce <HAL_I2C_Init+0x92>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a7d      	ldr	r2, [pc, #500]	; (8002bb8 <HAL_I2C_Init+0x27c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	bf94      	ite	ls
 80029c8:	2301      	movls	r3, #1
 80029ca:	2300      	movhi	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0e7      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a78      	ldr	r2, [pc, #480]	; (8002bbc <HAL_I2C_Init+0x280>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0c9b      	lsrs	r3, r3, #18
 80029e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a6a      	ldr	r2, [pc, #424]	; (8002bb0 <HAL_I2C_Init+0x274>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d802      	bhi.n	8002a10 <HAL_I2C_Init+0xd4>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	e009      	b.n	8002a24 <HAL_I2C_Init+0xe8>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	4a69      	ldr	r2, [pc, #420]	; (8002bc0 <HAL_I2C_Init+0x284>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	3301      	adds	r3, #1
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	495c      	ldr	r1, [pc, #368]	; (8002bb0 <HAL_I2C_Init+0x274>)
 8002a40:	428b      	cmp	r3, r1
 8002a42:	d819      	bhi.n	8002a78 <HAL_I2C_Init+0x13c>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e59      	subs	r1, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a52:	1c59      	adds	r1, r3, #1
 8002a54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a58:	400b      	ands	r3, r1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_I2C_Init+0x138>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e59      	subs	r1, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	e051      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e04f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <HAL_I2C_Init+0x168>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e012      	b.n	8002aca <HAL_I2C_Init+0x18e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Init+0x196>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e022      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <HAL_I2C_Init+0x1bc>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e58      	subs	r0, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	440b      	add	r3, r1
 8002ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af6:	e00f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	0099      	lsls	r1, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	6809      	ldr	r1, [r1, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6911      	ldr	r1, [r2, #16]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68d2      	ldr	r2, [r2, #12]
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	000186a0 	.word	0x000186a0
 8002bb4:	001e847f 	.word	0x001e847f
 8002bb8:	003d08ff 	.word	0x003d08ff
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	10624dd3 	.word	0x10624dd3

08002bc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	817b      	strh	r3, [r7, #10]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7fe ffa8 	bl	8001b2c <HAL_GetTick>
 8002bdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	f040 80e0 	bne.w	8002dac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2319      	movs	r3, #25
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4970      	ldr	r1, [pc, #448]	; (8002db8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f964 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0d3      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_I2C_Master_Transmit+0x50>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e0cc      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d007      	beq.n	8002c3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2221      	movs	r2, #33	; 0x21
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2210      	movs	r2, #16
 8002c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	893a      	ldrh	r2, [r7, #8]
 8002c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a50      	ldr	r2, [pc, #320]	; (8002dbc <HAL_I2C_Master_Transmit+0x1f8>)
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	6a3a      	ldr	r2, [r7, #32]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f89c 	bl	8002dc0 <I2C_MasterRequestWrite>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e08d      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ca8:	e066      	b.n	8002d78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	6a39      	ldr	r1, [r7, #32]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f9de 	bl	8003070 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d107      	bne.n	8002cd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06b      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d11b      	bne.n	8002d4c <HAL_I2C_Master_Transmit+0x188>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d017      	beq.n	8002d4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	6a39      	ldr	r1, [r7, #32]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f9ce 	bl	80030f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d107      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e01a      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d194      	bne.n	8002caa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	00100002 	.word	0x00100002
 8002dbc:	ffff0000 	.word	0xffff0000

08002dc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d006      	beq.n	8002dea <I2C_MasterRequestWrite+0x2a>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d003      	beq.n	8002dea <I2C_MasterRequestWrite+0x2a>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002de8:	d108      	bne.n	8002dfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e00b      	b.n	8002e14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	2b12      	cmp	r3, #18
 8002e02:	d107      	bne.n	8002e14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f84f 	bl	8002ec4 <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3a:	d103      	bne.n	8002e44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e035      	b.n	8002eb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e50:	d108      	bne.n	8002e64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e52:	897b      	ldrh	r3, [r7, #10]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	e01b      	b.n	8002e9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	11db      	asrs	r3, r3, #7
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0306 	and.w	r3, r3, #6
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f063 030f 	orn	r3, r3, #15
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	490e      	ldr	r1, [pc, #56]	; (8002ebc <I2C_MasterRequestWrite+0xfc>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f875 	bl	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e010      	b.n	8002eb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4907      	ldr	r1, [pc, #28]	; (8002ec0 <I2C_MasterRequestWrite+0x100>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f865 	bl	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	00010008 	.word	0x00010008
 8002ec0:	00010002 	.word	0x00010002

08002ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed4:	e025      	b.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002edc:	d021      	beq.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fe fe25 	bl	8001b2c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d116      	bne.n	8002f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e023      	b.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	0c1b      	lsrs	r3, r3, #16
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10d      	bne.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4013      	ands	r3, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	e00c      	b.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d0b6      	beq.n	8002ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f80:	e051      	b.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d123      	bne.n	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002faa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e046      	b.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe0:	d021      	beq.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe fda3 	bl	8001b2c <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d116      	bne.n	8003026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e020      	b.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	0c1b      	lsrs	r3, r3, #16
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10c      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	43da      	mvns	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf14      	ite	ne
 8003042:	2301      	movne	r3, #1
 8003044:	2300      	moveq	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	e00b      	b.n	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	43da      	mvns	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	4013      	ands	r3, r2
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d18d      	bne.n	8002f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307c:	e02d      	b.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f878 	bl	8003174 <I2C_IsAcknowledgeFailed>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e02d      	b.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003094:	d021      	beq.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7fe fd49 	bl	8001b2c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d116      	bne.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f043 0220 	orr.w	r2, r3, #32
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e007      	b.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d1ca      	bne.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030fe:	e02d      	b.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f837 	bl	8003174 <I2C_IsAcknowledgeFailed>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e02d      	b.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003116:	d021      	beq.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003118:	f7fe fd08 	bl	8001b2c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	429a      	cmp	r2, r3
 8003126:	d302      	bcc.n	800312e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e007      	b.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d1ca      	bne.n	8003100 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318a:	d11b      	bne.n	80031c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003194:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e128      	b.n	8003438 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a90      	ldr	r2, [pc, #576]	; (8003440 <HAL_I2S_Init+0x26c>)
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7fd ff4f 	bl	80010a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800321c:	f023 030f 	bic.w	r3, r3, #15
 8003220:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2202      	movs	r2, #2
 8003228:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d060      	beq.n	80032f4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d102      	bne.n	8003240 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800323a:	2310      	movs	r3, #16
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	e001      	b.n	8003244 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003240:	2320      	movs	r3, #32
 8003242:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b20      	cmp	r3, #32
 800324a:	d802      	bhi.n	8003252 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003252:	2001      	movs	r0, #1
 8003254:	f001 fcce 	bl	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003258:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003262:	d125      	bne.n	80032b0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	fbb2 f2f3 	udiv	r2, r2, r3
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	461a      	mov	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	3305      	adds	r3, #5
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e01f      	b.n	80032ce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	3305      	adds	r3, #5
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	e00e      	b.n	80032ce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	461a      	mov	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	3305      	adds	r3, #5
 80032cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4a5c      	ldr	r2, [pc, #368]	; (8003444 <HAL_I2S_Init+0x270>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	08db      	lsrs	r3, r3, #3
 80032d8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	e003      	b.n	80032fc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032f4:	2302      	movs	r3, #2
 80032f6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d902      	bls.n	8003308 <HAL_I2S_Init+0x134>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	2bff      	cmp	r3, #255	; 0xff
 8003306:	d907      	bls.n	8003318 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f043 0210 	orr.w	r2, r3, #16
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e08f      	b.n	8003438 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	ea42 0103 	orr.w	r1, r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	430a      	orrs	r2, r1
 800332a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6851      	ldr	r1, [r2, #4]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6892      	ldr	r2, [r2, #8]
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	68d2      	ldr	r2, [r2, #12]
 8003348:	4311      	orrs	r1, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6992      	ldr	r2, [r2, #24]
 800334e:	430a      	orrs	r2, r1
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800335a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d161      	bne.n	8003428 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a38      	ldr	r2, [pc, #224]	; (8003448 <HAL_I2S_Init+0x274>)
 8003368:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a37      	ldr	r2, [pc, #220]	; (800344c <HAL_I2S_Init+0x278>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_I2S_Init+0x1a4>
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_I2S_Init+0x27c>)
 8003376:	e001      	b.n	800337c <HAL_I2S_Init+0x1a8>
 8003378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	4932      	ldr	r1, [pc, #200]	; (800344c <HAL_I2S_Init+0x278>)
 8003384:	428a      	cmp	r2, r1
 8003386:	d101      	bne.n	800338c <HAL_I2S_Init+0x1b8>
 8003388:	4a31      	ldr	r2, [pc, #196]	; (8003450 <HAL_I2S_Init+0x27c>)
 800338a:	e001      	b.n	8003390 <HAL_I2S_Init+0x1bc>
 800338c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003390:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003394:	f023 030f 	bic.w	r3, r3, #15
 8003398:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a2b      	ldr	r2, [pc, #172]	; (800344c <HAL_I2S_Init+0x278>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_I2S_Init+0x1d4>
 80033a4:	4b2a      	ldr	r3, [pc, #168]	; (8003450 <HAL_I2S_Init+0x27c>)
 80033a6:	e001      	b.n	80033ac <HAL_I2S_Init+0x1d8>
 80033a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033ac:	2202      	movs	r2, #2
 80033ae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a25      	ldr	r2, [pc, #148]	; (800344c <HAL_I2S_Init+0x278>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d101      	bne.n	80033be <HAL_I2S_Init+0x1ea>
 80033ba:	4b25      	ldr	r3, [pc, #148]	; (8003450 <HAL_I2S_Init+0x27c>)
 80033bc:	e001      	b.n	80033c2 <HAL_I2S_Init+0x1ee>
 80033be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ce:	d003      	beq.n	80033d8 <HAL_I2S_Init+0x204>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	e001      	b.n	80033e4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033f8:	4313      	orrs	r3, r2
 80033fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003402:	4313      	orrs	r3, r2
 8003404:	b29a      	uxth	r2, r3
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	4313      	orrs	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003410:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a0d      	ldr	r2, [pc, #52]	; (800344c <HAL_I2S_Init+0x278>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d101      	bne.n	8003420 <HAL_I2S_Init+0x24c>
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <HAL_I2S_Init+0x27c>)
 800341e:	e001      	b.n	8003424 <HAL_I2S_Init+0x250>
 8003420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003424:	897a      	ldrh	r2, [r7, #10]
 8003426:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	08003b0d 	.word	0x08003b0d
 8003444:	cccccccd 	.word	0xcccccccd
 8003448:	08003c95 	.word	0x08003c95
 800344c:	40003800 	.word	0x40003800
 8003450:	40003400 	.word	0x40003400

08003454 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_I2S_Transmit_DMA+0x1a>
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e08e      	b.n	8003590 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2S_Transmit_DMA+0x2e>
 800347e:	2302      	movs	r3, #2
 8003480:	e086      	b.n	8003590 <HAL_I2S_Transmit_DMA+0x13c>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d005      	beq.n	80034a2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	e076      	b.n	8003590 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2203      	movs	r2, #3
 80034a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d002      	beq.n	80034ce <HAL_I2S_Transmit_DMA+0x7a>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d10a      	bne.n	80034e4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034e2:	e005      	b.n	80034f0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	4a28      	ldr	r2, [pc, #160]	; (8003598 <HAL_I2S_Transmit_DMA+0x144>)
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <HAL_I2S_Transmit_DMA+0x148>)
 80034fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <HAL_I2S_Transmit_DMA+0x14c>)
 8003506:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003510:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003518:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003520:	f7fe fd02 	bl	8001f28 <HAL_DMA_Start_IT>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00f      	beq.n	800354a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f043 0208 	orr.w	r2, r3, #8
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e022      	b.n	8003590 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003566:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d107      	bne.n	8003586 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0202 	orr.w	r2, r2, #2
 8003584:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	080039eb 	.word	0x080039eb
 800359c:	080039a9 	.word	0x080039a9
 80035a0:	08003a07 	.word	0x08003a07

080035a4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d004      	beq.n	80035c4 <HAL_I2S_DMAStop+0x20>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 80d1 	bne.w	8003766 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00f      	beq.n	80035ec <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fd01 	bl	8001fd8 <HAL_DMA_Abort>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	f043 0208 	orr.w	r2, r3, #8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80035ec:	2364      	movs	r3, #100	; 0x64
 80035ee:	2201      	movs	r2, #1
 80035f0:	2102      	movs	r1, #2
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fb14 	bl	8003c20 <I2S_WaitFlagStateUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8003616:	2364      	movs	r3, #100	; 0x64
 8003618:	2200      	movs	r2, #0
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 faff 	bl	8003c20 <I2S_WaitFlagStateUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0202 	bic.w	r2, r2, #2
 800366c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b05      	cmp	r3, #5
 8003678:	f040 8165 	bne.w	8003946 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00f      	beq.n	80036a4 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	4618      	mov	r0, r3
 800368a:	f7fe fca5 	bl	8001fd8 <HAL_DMA_Abort>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f043 0208 	orr.w	r2, r3, #8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a8a      	ldr	r2, [pc, #552]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_I2S_DMAStop+0x10e>
 80036ae:	4b8a      	ldr	r3, [pc, #552]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 80036b0:	e001      	b.n	80036b6 <HAL_I2S_DMAStop+0x112>
 80036b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4985      	ldr	r1, [pc, #532]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 80036be:	428b      	cmp	r3, r1
 80036c0:	d101      	bne.n	80036c6 <HAL_I2S_DMAStop+0x122>
 80036c2:	4b85      	ldr	r3, [pc, #532]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 80036c4:	e001      	b.n	80036ca <HAL_I2S_DMAStop+0x126>
 80036c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_I2S_DMAStop+0x13e>
 80036de:	4b7e      	ldr	r3, [pc, #504]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 80036e0:	e001      	b.n	80036e6 <HAL_I2S_DMAStop+0x142>
 80036e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a79      	ldr	r2, [pc, #484]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_I2S_DMAStop+0x154>
 80036f4:	4b78      	ldr	r3, [pc, #480]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 80036f6:	e001      	b.n	80036fc <HAL_I2S_DMAStop+0x158>
 80036f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a73      	ldr	r2, [pc, #460]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_I2S_DMAStop+0x16c>
 800370c:	4b72      	ldr	r3, [pc, #456]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 800370e:	e001      	b.n	8003714 <HAL_I2S_DMAStop+0x170>
 8003710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	496e      	ldr	r1, [pc, #440]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 800371c:	428b      	cmp	r3, r1
 800371e:	d101      	bne.n	8003724 <HAL_I2S_DMAStop+0x180>
 8003720:	4b6d      	ldr	r3, [pc, #436]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 8003722:	e001      	b.n	8003728 <HAL_I2S_DMAStop+0x184>
 8003724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800374e:	e0fa      	b.n	8003946 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a5f      	ldr	r2, [pc, #380]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_I2S_DMAStop+0x1ba>
 800375a:	4b5f      	ldr	r3, [pc, #380]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 800375c:	e001      	b.n	8003762 <HAL_I2S_DMAStop+0x1be>
 800375e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003762:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8003764:	e0ef      	b.n	8003946 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800376e:	d005      	beq.n	800377c <HAL_I2S_DMAStop+0x1d8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003778:	f040 80e5 	bne.w	8003946 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00f      	beq.n	80037a4 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe fc25 	bl	8001fd8 <HAL_DMA_Abort>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	f043 0208 	orr.w	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	f040 809a 	bne.w	80038e6 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00f      	beq.n	80037da <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fc0a 	bl	8001fd8 <HAL_DMA_Abort>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f043 0208 	orr.w	r2, r3, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80037da:	f7fe f9a7 	bl	8001b2c <HAL_GetTick>
 80037de:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80037e0:	e012      	b.n	8003808 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80037e2:	f7fe f9a3 	bl	8001b2c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b64      	cmp	r3, #100	; 0x64
 80037ee:	d90b      	bls.n	8003808 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a31      	ldr	r2, [pc, #196]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_I2S_DMAStop+0x272>
 8003812:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 8003814:	e001      	b.n	800381a <HAL_I2S_DMAStop+0x276>
 8003816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d1de      	bne.n	80037e2 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8003824:	e012      	b.n	800384c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8003826:	f7fe f981 	bl	8001b2c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b64      	cmp	r3, #100	; 0x64
 8003832:	d90b      	bls.n	800384c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f043 0201 	orr.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a20      	ldr	r2, [pc, #128]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_I2S_DMAStop+0x2b6>
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 8003858:	e001      	b.n	800385e <HAL_I2S_DMAStop+0x2ba>
 800385a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003864:	2b80      	cmp	r3, #128	; 0x80
 8003866:	d0de      	beq.n	8003826 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a19      	ldr	r2, [pc, #100]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_I2S_DMAStop+0x2d2>
 8003872:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 8003874:	e001      	b.n	800387a <HAL_I2S_DMAStop+0x2d6>
 8003876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4914      	ldr	r1, [pc, #80]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 8003882:	428b      	cmp	r3, r1
 8003884:	d101      	bne.n	800388a <HAL_I2S_DMAStop+0x2e6>
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 8003888:	e001      	b.n	800388e <HAL_I2S_DMAStop+0x2ea>
 800388a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003892:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_I2S_DMAStop+0x302>
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 80038a4:	e001      	b.n	80038aa <HAL_I2S_DMAStop+0x306>
 80038a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_I2S_DMAStop+0x31a>
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 80038bc:	e001      	b.n	80038c2 <HAL_I2S_DMAStop+0x31e>
 80038be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4902      	ldr	r1, [pc, #8]	; (80038d4 <HAL_I2S_DMAStop+0x330>)
 80038ca:	428b      	cmp	r3, r1
 80038cc:	d106      	bne.n	80038dc <HAL_I2S_DMAStop+0x338>
 80038ce:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <HAL_I2S_DMAStop+0x334>)
 80038d0:	e006      	b.n	80038e0 <HAL_I2S_DMAStop+0x33c>
 80038d2:	bf00      	nop
 80038d4:	40003800 	.word	0x40003800
 80038d8:	40003400 	.word	0x40003400
 80038dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e0:	f022 0202 	bic.w	r2, r2, #2
 80038e4:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f4:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003924:	d10c      	bne.n	8003940 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e002      	b.n	8003946 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800394e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10e      	bne.n	80039dc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0202 	bic.w	r2, r2, #2
 80039cc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff ffc5 	bl	800396c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff ffad 	bl	8003958 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0203 	bic.w	r2, r2, #3
 8003a22:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f043 0208 	orr.w	r2, r3, #8
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff ffa5 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	1c9a      	adds	r2, r3, #2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10e      	bne.n	8003aa6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a96:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff63 	bl	800396c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	b292      	uxth	r2, r2
 8003ac2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	1c9a      	adds	r2, r3, #2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10e      	bne.n	8003b04 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003af4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff3e 	bl	8003980 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d13a      	bne.n	8003b9e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d109      	bne.n	8003b46 <I2S_IRQHandler+0x3a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d102      	bne.n	8003b46 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ffb4 	bl	8003aae <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d126      	bne.n	8003b9e <I2S_IRQHandler+0x92>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d11f      	bne.n	8003b9e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b6c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f043 0202 	orr.w	r2, r3, #2
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fefb 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d136      	bne.n	8003c18 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d109      	bne.n	8003bc8 <I2S_IRQHandler+0xbc>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbe:	2b80      	cmp	r3, #128	; 0x80
 8003bc0:	d102      	bne.n	8003bc8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ff45 	bl	8003a52 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d122      	bne.n	8003c18 <I2S_IRQHandler+0x10c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d11b      	bne.n	8003c18 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bee:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f043 0204 	orr.w	r2, r3, #4
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff febe 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c18:	bf00      	nop
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c30:	f7fd ff7c 	bl	8001b2c <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003c36:	e018      	b.n	8003c6a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3e:	d014      	beq.n	8003c6a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003c40:	f7fd ff74 	bl	8001b2c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d902      	bls.n	8003c56 <I2S_WaitFlagStateUntilTimeout+0x36>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e00f      	b.n	8003c8a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4013      	ands	r3, r2
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	bf0c      	ite	eq
 8003c7a:	2301      	moveq	r3, #1
 8003c7c:	2300      	movne	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1d7      	bne.n	8003c38 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4aa2      	ldr	r2, [pc, #648]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003cae:	4ba2      	ldr	r3, [pc, #648]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cb0:	e001      	b.n	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003cb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a9b      	ldr	r2, [pc, #620]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d101      	bne.n	8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ccc:	4b9a      	ldr	r3, [pc, #616]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cce:	e001      	b.n	8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003cd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce0:	d004      	beq.n	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 8099 	bne.w	8003e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d107      	bne.n	8003d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f925 	bl	8003f50 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9c8 	bl	80040b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d13a      	bne.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d035      	beq.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7e      	ldr	r2, [pc, #504]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003d3e:	4b7e      	ldr	r3, [pc, #504]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d40:	e001      	b.n	8003d46 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4979      	ldr	r1, [pc, #484]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d4e:	428b      	cmp	r3, r1
 8003d50:	d101      	bne.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003d52:	4b79      	ldr	r3, [pc, #484]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d54:	e001      	b.n	8003d5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d5e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fdfa 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	f040 80be 	bne.w	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80b8 	beq.w	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a59      	ldr	r2, [pc, #356]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003dd2:	4b59      	ldr	r3, [pc, #356]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dd4:	e001      	b.n	8003dda <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4954      	ldr	r1, [pc, #336]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003de2:	428b      	cmp	r3, r1
 8003de4:	d101      	bne.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003de6:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003de8:	e001      	b.n	8003dee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003df2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003df4:	2300      	movs	r3, #0
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f043 0204 	orr.w	r2, r3, #4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff fdbc 	bl	8003994 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e1c:	e084      	b.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d107      	bne.n	8003e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8be 	bl	8003fb4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d107      	bne.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f8fd 	bl	800404c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d12f      	bne.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02a      	beq.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e74:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2e      	ldr	r2, [pc, #184]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e80:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e82:	e001      	b.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4929      	ldr	r1, [pc, #164]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e90:	428b      	cmp	r3, r1
 8003e92:	d101      	bne.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e96:	e001      	b.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ea0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f043 0202 	orr.w	r2, r3, #2
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fd6c 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d131      	bne.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02c      	beq.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003eda:	4b17      	ldr	r3, [pc, #92]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003edc:	e001      	b.n	8003ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ede:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4912      	ldr	r1, [pc, #72]	; (8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003eea:	428b      	cmp	r3, r1
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ef0:	e001      	b.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003ef2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003efa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f0a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	f043 0204 	orr.w	r2, r3, #4
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff fd37 	bl	8003994 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f26:	e000      	b.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f28:	bf00      	nop
}
 8003f2a:	bf00      	nop
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40003800 	.word	0x40003800
 8003f38:	40003400 	.word	0x40003400

08003f3c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	1c99      	adds	r1, r3, #2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6251      	str	r1, [r2, #36]	; 0x24
 8003f62:	881a      	ldrh	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d113      	bne.n	8003faa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ffc9 	bl	8003f3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	1c99      	adds	r1, r3, #2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6251      	str	r1, [r2, #36]	; 0x24
 8003fc6:	8819      	ldrh	r1, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <I2SEx_TxISR_I2SExt+0x90>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d101      	bne.n	8003fd6 <I2SEx_TxISR_I2SExt+0x22>
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <I2SEx_TxISR_I2SExt+0x94>)
 8003fd4:	e001      	b.n	8003fda <I2SEx_TxISR_I2SExt+0x26>
 8003fd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fda:	460a      	mov	r2, r1
 8003fdc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d121      	bne.n	800403a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a12      	ldr	r2, [pc, #72]	; (8004044 <I2SEx_TxISR_I2SExt+0x90>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <I2SEx_TxISR_I2SExt+0x50>
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <I2SEx_TxISR_I2SExt+0x94>)
 8004002:	e001      	b.n	8004008 <I2SEx_TxISR_I2SExt+0x54>
 8004004:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	490d      	ldr	r1, [pc, #52]	; (8004044 <I2SEx_TxISR_I2SExt+0x90>)
 8004010:	428b      	cmp	r3, r1
 8004012:	d101      	bne.n	8004018 <I2SEx_TxISR_I2SExt+0x64>
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <I2SEx_TxISR_I2SExt+0x94>)
 8004016:	e001      	b.n	800401c <I2SEx_TxISR_I2SExt+0x68>
 8004018:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800401c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004020:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff ff81 	bl	8003f3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40003800 	.word	0x40003800
 8004048:	40003400 	.word	0x40003400

0800404c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68d8      	ldr	r0, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	1c99      	adds	r1, r3, #2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004064:	b282      	uxth	r2, r0
 8004066:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d113      	bne.n	80040a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800408e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ff4a 	bl	8003f3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a20      	ldr	r2, [pc, #128]	; (8004140 <I2SEx_RxISR_I2SExt+0x90>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <I2SEx_RxISR_I2SExt+0x16>
 80040c2:	4b20      	ldr	r3, [pc, #128]	; (8004144 <I2SEx_RxISR_I2SExt+0x94>)
 80040c4:	e001      	b.n	80040ca <I2SEx_RxISR_I2SExt+0x1a>
 80040c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ca:	68d8      	ldr	r0, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	1c99      	adds	r1, r3, #2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80040d6:	b282      	uxth	r2, r0
 80040d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d121      	bne.n	8004136 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <I2SEx_RxISR_I2SExt+0x90>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d101      	bne.n	8004100 <I2SEx_RxISR_I2SExt+0x50>
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <I2SEx_RxISR_I2SExt+0x94>)
 80040fe:	e001      	b.n	8004104 <I2SEx_RxISR_I2SExt+0x54>
 8004100:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	490d      	ldr	r1, [pc, #52]	; (8004140 <I2SEx_RxISR_I2SExt+0x90>)
 800410c:	428b      	cmp	r3, r1
 800410e:	d101      	bne.n	8004114 <I2SEx_RxISR_I2SExt+0x64>
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <I2SEx_RxISR_I2SExt+0x94>)
 8004112:	e001      	b.n	8004118 <I2SEx_RxISR_I2SExt+0x68>
 8004114:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004118:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800411c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff03 	bl	8003f3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40003800 	.word	0x40003800
 8004144:	40003400 	.word	0x40003400

08004148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e264      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d075      	beq.n	8004252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004166:	4ba3      	ldr	r3, [pc, #652]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b04      	cmp	r3, #4
 8004170:	d00c      	beq.n	800418c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4ba0      	ldr	r3, [pc, #640]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417a:	2b08      	cmp	r3, #8
 800417c:	d112      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417e:	4b9d      	ldr	r3, [pc, #628]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	4b99      	ldr	r3, [pc, #612]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05b      	beq.n	8004250 <HAL_RCC_OscConfig+0x108>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d157      	bne.n	8004250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e23f      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d106      	bne.n	80041bc <HAL_RCC_OscConfig+0x74>
 80041ae:	4b91      	ldr	r3, [pc, #580]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a90      	ldr	r2, [pc, #576]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e01d      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x98>
 80041c6:	4b8b      	ldr	r3, [pc, #556]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a8a      	ldr	r2, [pc, #552]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a87      	ldr	r2, [pc, #540]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041e0:	4b84      	ldr	r3, [pc, #528]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a83      	ldr	r2, [pc, #524]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b81      	ldr	r3, [pc, #516]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a80      	ldr	r2, [pc, #512]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fd fc94 	bl	8001b2c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004208:	f7fd fc90 	bl	8001b2c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	; 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e204      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	4b76      	ldr	r3, [pc, #472]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0xc0>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fd fc80 	bl	8001b2c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004230:	f7fd fc7c 	bl	8001b2c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1f0      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	4b6c      	ldr	r3, [pc, #432]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0xe8>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d063      	beq.n	8004326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800425e:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00b      	beq.n	8004282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b62      	ldr	r3, [pc, #392]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004272:	2b08      	cmp	r3, #8
 8004274:	d11c      	bne.n	80042b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004276:	4b5f      	ldr	r3, [pc, #380]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d116      	bne.n	80042b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	4b5c      	ldr	r3, [pc, #368]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_RCC_OscConfig+0x152>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d001      	beq.n	800429a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e1c4      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429a:	4b56      	ldr	r3, [pc, #344]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4952      	ldr	r1, [pc, #328]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	e03a      	b.n	8004326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d020      	beq.n	80042fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b8:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <HAL_RCC_OscConfig+0x2b0>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042be:	f7fd fc35 	bl	8001b2c <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c6:	f7fd fc31 	bl	8001b2c <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e1a5      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	4b46      	ldr	r3, [pc, #280]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4940      	ldr	r1, [pc, #256]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	600b      	str	r3, [r1, #0]
 80042f8:	e015      	b.n	8004326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fa:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <HAL_RCC_OscConfig+0x2b0>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fd fc14 	bl	8001b2c <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004308:	f7fd fc10 	bl	8001b2c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e184      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d030      	beq.n	8004394 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d016      	beq.n	8004368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800433a:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_RCC_OscConfig+0x2b4>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fd fbf4 	bl	8001b2c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004348:	f7fd fbf0 	bl	8001b2c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e164      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x200>
 8004366:	e015      	b.n	8004394 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004368:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCC_OscConfig+0x2b4>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7fd fbdd 	bl	8001b2c <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004376:	f7fd fbd9 	bl	8001b2c <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e14d      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 800438a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f0      	bne.n	8004376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80a0 	beq.w	80044e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	; 0x40
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_OscConfig+0x2b8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d121      	bne.n	8004422 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_RCC_OscConfig+0x2b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a07      	ldr	r2, [pc, #28]	; (8004400 <HAL_RCC_OscConfig+0x2b8>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fd fb9f 	bl	8001b2c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	e011      	b.n	8004416 <HAL_RCC_OscConfig+0x2ce>
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800
 80043f8:	42470000 	.word	0x42470000
 80043fc:	42470e80 	.word	0x42470e80
 8004400:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004404:	f7fd fb92 	bl	8001b2c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e106      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004416:	4b85      	ldr	r3, [pc, #532]	; (800462c <HAL_RCC_OscConfig+0x4e4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d106      	bne.n	8004438 <HAL_RCC_OscConfig+0x2f0>
 800442a:	4b81      	ldr	r3, [pc, #516]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	4a80      	ldr	r2, [pc, #512]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6713      	str	r3, [r2, #112]	; 0x70
 8004436:	e01c      	b.n	8004472 <HAL_RCC_OscConfig+0x32a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d10c      	bne.n	800445a <HAL_RCC_OscConfig+0x312>
 8004440:	4b7b      	ldr	r3, [pc, #492]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a7a      	ldr	r2, [pc, #488]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 8004446:	f043 0304 	orr.w	r3, r3, #4
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	4b78      	ldr	r3, [pc, #480]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	4a77      	ldr	r2, [pc, #476]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6713      	str	r3, [r2, #112]	; 0x70
 8004458:	e00b      	b.n	8004472 <HAL_RCC_OscConfig+0x32a>
 800445a:	4b75      	ldr	r3, [pc, #468]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a74      	ldr	r2, [pc, #464]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
 8004466:	4b72      	ldr	r3, [pc, #456]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a71      	ldr	r2, [pc, #452]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d015      	beq.n	80044a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd fb57 	bl	8001b2c <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fd fb53 	bl	8001b2c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e0c5      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004498:	4b65      	ldr	r3, [pc, #404]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ee      	beq.n	8004482 <HAL_RCC_OscConfig+0x33a>
 80044a4:	e014      	b.n	80044d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a6:	f7fd fb41 	bl	8001b2c <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fd fb3d 	bl	8001b2c <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e0af      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c4:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ee      	bne.n	80044ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d6:	4b56      	ldr	r3, [pc, #344]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	4a55      	ldr	r2, [pc, #340]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 80044dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 809b 	beq.w	8004622 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ec:	4b50      	ldr	r3, [pc, #320]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d05c      	beq.n	80045b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d141      	bne.n	8004584 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004500:	4b4c      	ldr	r3, [pc, #304]	; (8004634 <HAL_RCC_OscConfig+0x4ec>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fd fb11 	bl	8001b2c <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450e:	f7fd fb0d 	bl	8001b2c <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e081      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004520:	4b43      	ldr	r3, [pc, #268]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	019b      	lsls	r3, r3, #6
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	041b      	lsls	r3, r3, #16
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	061b      	lsls	r3, r3, #24
 8004550:	4937      	ldr	r1, [pc, #220]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004556:	4b37      	ldr	r3, [pc, #220]	; (8004634 <HAL_RCC_OscConfig+0x4ec>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fd fae6 	bl	8001b2c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fd fae2 	bl	8001b2c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e056      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x41c>
 8004582:	e04e      	b.n	8004622 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004584:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCC_OscConfig+0x4ec>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fd facf 	bl	8001b2c <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004592:	f7fd facb 	bl	8001b2c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e03f      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a4:	4b22      	ldr	r3, [pc, #136]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <HAL_RCC_OscConfig+0x44a>
 80045b0:	e037      	b.n	8004622 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e032      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045be:	4b1c      	ldr	r3, [pc, #112]	; (8004630 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d028      	beq.n	800461e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d121      	bne.n	800461e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d11a      	bne.n	800461e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045ee:	4013      	ands	r3, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d111      	bne.n	800461e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	3b01      	subs	r3, #1
 8004608:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d107      	bne.n	800461e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800461a:	429a      	cmp	r2, r3
 800461c:	d001      	beq.n	8004622 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40007000 	.word	0x40007000
 8004630:	40023800 	.word	0x40023800
 8004634:	42470060 	.word	0x42470060

08004638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0cc      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800464c:	4b68      	ldr	r3, [pc, #416]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d90c      	bls.n	8004674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b65      	ldr	r3, [pc, #404]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b63      	ldr	r3, [pc, #396]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0b8      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d020      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800468c:	4b59      	ldr	r3, [pc, #356]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a58      	ldr	r2, [pc, #352]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a4:	4b53      	ldr	r3, [pc, #332]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4a52      	ldr	r2, [pc, #328]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b0:	4b50      	ldr	r3, [pc, #320]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	494d      	ldr	r1, [pc, #308]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d044      	beq.n	8004758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d107      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d6:	4b47      	ldr	r3, [pc, #284]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d119      	bne.n	8004716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e07f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d003      	beq.n	80046f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f6:	4b3f      	ldr	r3, [pc, #252]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e06f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004706:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e067      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f023 0203 	bic.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4934      	ldr	r1, [pc, #208]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	4313      	orrs	r3, r2
 8004726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004728:	f7fd fa00 	bl	8001b2c <HAL_GetTick>
 800472c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472e:	e00a      	b.n	8004746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004730:	f7fd f9fc 	bl	8001b2c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f241 3288 	movw	r2, #5000	; 0x1388
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e04f      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004746:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 020c 	and.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	429a      	cmp	r2, r3
 8004756:	d1eb      	bne.n	8004730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d20c      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004766:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d001      	beq.n	8004780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e032      	b.n	80047e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4916      	ldr	r1, [pc, #88]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	4313      	orrs	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	490e      	ldr	r1, [pc, #56]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047be:	f000 f821 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80047c2:	4602      	mov	r2, r0
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	490a      	ldr	r1, [pc, #40]	; (80047f8 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	5ccb      	ldrb	r3, [r1, r3]
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	4a09      	ldr	r2, [pc, #36]	; (80047fc <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047da:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_RCC_ClockConfig+0x1c8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fd f960 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40023c00 	.word	0x40023c00
 80047f4:	40023800 	.word	0x40023800
 80047f8:	08006a60 	.word	0x08006a60
 80047fc:	20000000 	.word	0x20000000
 8004800:	20000004 	.word	0x20000004

08004804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004804:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	607b      	str	r3, [r7, #4]
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	2300      	movs	r3, #0
 8004816:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800481c:	4b67      	ldr	r3, [pc, #412]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 030c 	and.w	r3, r3, #12
 8004824:	2b08      	cmp	r3, #8
 8004826:	d00d      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x40>
 8004828:	2b08      	cmp	r3, #8
 800482a:	f200 80bd 	bhi.w	80049a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x34>
 8004832:	2b04      	cmp	r3, #4
 8004834:	d003      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x3a>
 8004836:	e0b7      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004838:	4b61      	ldr	r3, [pc, #388]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800483a:	60bb      	str	r3, [r7, #8]
       break;
 800483c:	e0b7      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800483e:	4b61      	ldr	r3, [pc, #388]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004840:	60bb      	str	r3, [r7, #8]
      break;
 8004842:	e0b4      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004844:	4b5d      	ldr	r3, [pc, #372]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800484c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800484e:	4b5b      	ldr	r3, [pc, #364]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d04d      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485a:	4b58      	ldr	r3, [pc, #352]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	461a      	mov	r2, r3
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	f240 10ff 	movw	r0, #511	; 0x1ff
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	ea02 0800 	and.w	r8, r2, r0
 8004872:	ea03 0901 	and.w	r9, r3, r1
 8004876:	4640      	mov	r0, r8
 8004878:	4649      	mov	r1, r9
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	014b      	lsls	r3, r1, #5
 8004884:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004888:	0142      	lsls	r2, r0, #5
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	ebb0 0008 	subs.w	r0, r0, r8
 8004892:	eb61 0109 	sbc.w	r1, r1, r9
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	018b      	lsls	r3, r1, #6
 80048a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048a4:	0182      	lsls	r2, r0, #6
 80048a6:	1a12      	subs	r2, r2, r0
 80048a8:	eb63 0301 	sbc.w	r3, r3, r1
 80048ac:	f04f 0000 	mov.w	r0, #0
 80048b0:	f04f 0100 	mov.w	r1, #0
 80048b4:	00d9      	lsls	r1, r3, #3
 80048b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048ba:	00d0      	lsls	r0, r2, #3
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	eb12 0208 	adds.w	r2, r2, r8
 80048c4:	eb43 0309 	adc.w	r3, r3, r9
 80048c8:	f04f 0000 	mov.w	r0, #0
 80048cc:	f04f 0100 	mov.w	r1, #0
 80048d0:	0259      	lsls	r1, r3, #9
 80048d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048d6:	0250      	lsls	r0, r2, #9
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	f7fc f824 	bl	8000934 <__aeabi_uldivmod>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4613      	mov	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e04a      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f6:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	099b      	lsrs	r3, r3, #6
 80048fc:	461a      	mov	r2, r3
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004906:	f04f 0100 	mov.w	r1, #0
 800490a:	ea02 0400 	and.w	r4, r2, r0
 800490e:	ea03 0501 	and.w	r5, r3, r1
 8004912:	4620      	mov	r0, r4
 8004914:	4629      	mov	r1, r5
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	014b      	lsls	r3, r1, #5
 8004920:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004924:	0142      	lsls	r2, r0, #5
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	1b00      	subs	r0, r0, r4
 800492c:	eb61 0105 	sbc.w	r1, r1, r5
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	018b      	lsls	r3, r1, #6
 800493a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800493e:	0182      	lsls	r2, r0, #6
 8004940:	1a12      	subs	r2, r2, r0
 8004942:	eb63 0301 	sbc.w	r3, r3, r1
 8004946:	f04f 0000 	mov.w	r0, #0
 800494a:	f04f 0100 	mov.w	r1, #0
 800494e:	00d9      	lsls	r1, r3, #3
 8004950:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004954:	00d0      	lsls	r0, r2, #3
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	1912      	adds	r2, r2, r4
 800495c:	eb45 0303 	adc.w	r3, r5, r3
 8004960:	f04f 0000 	mov.w	r0, #0
 8004964:	f04f 0100 	mov.w	r1, #0
 8004968:	0299      	lsls	r1, r3, #10
 800496a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800496e:	0290      	lsls	r0, r2, #10
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4610      	mov	r0, r2
 8004976:	4619      	mov	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	461a      	mov	r2, r3
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	f7fb ffd8 	bl	8000934 <__aeabi_uldivmod>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4613      	mov	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800498c:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	0c1b      	lsrs	r3, r3, #16
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	3301      	adds	r3, #1
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	60bb      	str	r3, [r7, #8]
      break;
 80049a6:	e002      	b.n	80049ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049aa:	60bb      	str	r3, [r7, #8]
      break;
 80049ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ae:	68bb      	ldr	r3, [r7, #8]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	007a1200 	.word	0x007a1200

080049c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000000 	.word	0x20000000

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049e4:	f7ff fff0 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	0a9b      	lsrs	r3, r3, #10
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4903      	ldr	r1, [pc, #12]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40023800 	.word	0x40023800
 8004a04:	08006a70 	.word	0x08006a70

08004a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a0c:	f7ff ffdc 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0b5b      	lsrs	r3, r3, #13
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	08006a70 	.word	0x08006a70

08004a30 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d035      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a58:	4b62      	ldr	r3, [pc, #392]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a5e:	f7fd f865 	bl	8001b2c <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a66:	f7fd f861 	bl	8001b2c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e0b0      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a78:	4b5b      	ldr	r3, [pc, #364]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f0      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	019a      	lsls	r2, r3, #6
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	071b      	lsls	r3, r3, #28
 8004a90:	4955      	ldr	r1, [pc, #340]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a98:	4b52      	ldr	r3, [pc, #328]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9e:	f7fd f845 	bl	8001b2c <HAL_GetTick>
 8004aa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aa6:	f7fd f841 	bl	8001b2c <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e090      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab8:	4b4b      	ldr	r3, [pc, #300]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8083 	beq.w	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	4b44      	ldr	r3, [pc, #272]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	4a43      	ldr	r2, [pc, #268]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae2:	4b41      	ldr	r3, [pc, #260]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004aee:	4b3f      	ldr	r3, [pc, #252]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3e      	ldr	r2, [pc, #248]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004afa:	f7fd f817 	bl	8001b2c <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b00:	e008      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b02:	f7fd f813 	bl	8001b2c <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e062      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b14:	4b35      	ldr	r3, [pc, #212]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b20:	4b31      	ldr	r3, [pc, #196]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02f      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d028      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b3e:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b48:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b4e:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b54:	4a24      	ldr	r2, [pc, #144]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b5a:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d114      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b66:	f7fc ffe1 	bl	8001b2c <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6c:	e00a      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6e:	f7fc ffdd 	bl	8001b2c <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e02a      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b84:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ee      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9c:	d10d      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb2:	490d      	ldr	r1, [pc, #52]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	608b      	str	r3, [r1, #8]
 8004bb8:	e005      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bba:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bc4:	6093      	str	r3, [r2, #8]
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd2:	4905      	ldr	r1, [pc, #20]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	42470068 	.word	0x42470068
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	42470e40 	.word	0x42470e40

08004bf4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d13e      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c12:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d12f      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c28:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c2a:	617b      	str	r3, [r7, #20]
          break;
 8004c2c:	e02f      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3a:	d108      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c3c:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c44:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	e007      	b.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c56:	4a15      	ldr	r2, [pc, #84]	; (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c78:	0f1b      	lsrs	r3, r3, #28
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]
          break;
 8004c86:	e002      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
          break;
 8004c8c:	bf00      	nop
        }
      }
      break;
 8004c8e:	bf00      	nop
    }
  }
  return frequency;
 8004c90:	697b      	ldr	r3, [r7, #20]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	00bb8000 	.word	0x00bb8000
 8004ca8:	007a1200 	.word	0x007a1200
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e03f      	b.n	8004d42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fc fdd2 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2224      	movs	r2, #36	; 0x24
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fc7b 	bl	80055f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b0ba      	sub	sp, #232	; 0xe8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10f      	bne.n	8004db2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_UART_IRQHandler+0x66>
 8004d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fb65 	bl	800547a <UART_Receive_IT>
      return;
 8004db0:	e256      	b.n	8005260 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80de 	beq.w	8004f78 <HAL_UART_IRQHandler+0x22c>
 8004dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dcc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80d1 	beq.w	8004f78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <HAL_UART_IRQHandler+0xae>
 8004de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f043 0201 	orr.w	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <HAL_UART_IRQHandler+0xd2>
 8004e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0202 	orr.w	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00b      	beq.n	8004e42 <HAL_UART_IRQHandler+0xf6>
 8004e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f043 0204 	orr.w	r2, r3, #4
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d011      	beq.n	8004e72 <HAL_UART_IRQHandler+0x126>
 8004e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d105      	bne.n	8004e66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f043 0208 	orr.w	r2, r3, #8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 81ed 	beq.w	8005256 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_UART_IRQHandler+0x14e>
 8004e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 faf0 	bl	800547a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <HAL_UART_IRQHandler+0x17a>
 8004ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d04f      	beq.n	8004f66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9f8 	bl	80052bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	d141      	bne.n	8004f5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3314      	adds	r3, #20
 8004f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1d9      	bne.n	8004eda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d013      	beq.n	8004f56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	4a7d      	ldr	r2, [pc, #500]	; (8005128 <HAL_UART_IRQHandler+0x3dc>)
 8004f34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fd f8bc 	bl	80020b8 <HAL_DMA_Abort_IT>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d016      	beq.n	8004f74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f50:	4610      	mov	r0, r2
 8004f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	e00e      	b.n	8004f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f99a 	bl	8005290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5c:	e00a      	b.n	8004f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f996 	bl	8005290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f64:	e006      	b.n	8004f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f992 	bl	8005290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f72:	e170      	b.n	8005256 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f74:	bf00      	nop
    return;
 8004f76:	e16e      	b.n	8005256 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	f040 814a 	bne.w	8005216 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8143 	beq.w	8005216 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 813c 	beq.w	8005216 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	f040 80b4 	bne.w	800512c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8140 	beq.w	800525a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	f080 8139 	bcs.w	800525a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffa:	f000 8088 	beq.w	800510e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	330c      	adds	r3, #12
 8005026:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800502a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800502e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005036:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1d9      	bne.n	8004ffe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3314      	adds	r3, #20
 8005050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800505a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3314      	adds	r3, #20
 800506a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800506e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005072:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005076:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e1      	bne.n	800504a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3314      	adds	r3, #20
 800508c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3314      	adds	r3, #20
 80050a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e3      	bne.n	8005086 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050de:	f023 0310 	bic.w	r3, r3, #16
 80050e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80050f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e3      	bne.n	80050cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	4618      	mov	r0, r3
 800510a:	f7fc ff65 	bl	8001fd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005116:	b29b      	uxth	r3, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	b29b      	uxth	r3, r3
 800511c:	4619      	mov	r1, r3
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8c0 	bl	80052a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005124:	e099      	b.n	800525a <HAL_UART_IRQHandler+0x50e>
 8005126:	bf00      	nop
 8005128:	08005383 	.word	0x08005383
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005134:	b29b      	uxth	r3, r3
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 808b 	beq.w	800525e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8086 	beq.w	800525e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005176:	647a      	str	r2, [r7, #68]	; 0x44
 8005178:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800517c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e3      	bne.n	8005152 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3314      	adds	r3, #20
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	623b      	str	r3, [r7, #32]
   return(result);
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051ae:	633a      	str	r2, [r7, #48]	; 0x30
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e3      	bne.n	800518a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0310 	bic.w	r3, r3, #16
 80051e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051f4:	61fa      	str	r2, [r7, #28]
 80051f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	69b9      	ldr	r1, [r7, #24]
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	617b      	str	r3, [r7, #20]
   return(result);
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e3      	bne.n	80051d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f848 	bl	80052a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005214:	e023      	b.n	800525e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_UART_IRQHandler+0x4ea>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8bb 	bl	80053aa <UART_Transmit_IT>
    return;
 8005234:	e014      	b.n	8005260 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00e      	beq.n	8005260 <HAL_UART_IRQHandler+0x514>
 8005242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f8fb 	bl	800544a <UART_EndTransmit_IT>
    return;
 8005254:	e004      	b.n	8005260 <HAL_UART_IRQHandler+0x514>
    return;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <HAL_UART_IRQHandler+0x514>
      return;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <HAL_UART_IRQHandler+0x514>
      return;
 800525e:	bf00      	nop
  }
}
 8005260:	37e8      	adds	r7, #232	; 0xe8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop

08005268 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b095      	sub	sp, #84	; 0x54
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	330c      	adds	r3, #12
 80052e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052e4:	643a      	str	r2, [r7, #64]	; 0x40
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e5      	bne.n	80052c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3314      	adds	r3, #20
 80052fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	61fb      	str	r3, [r7, #28]
   return(result);
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800531e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e5      	bne.n	80052f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	2b01      	cmp	r3, #1
 8005332:	d119      	bne.n	8005368 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	60bb      	str	r3, [r7, #8]
   return(result);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f023 0310 	bic.w	r3, r3, #16
 800534a:	647b      	str	r3, [r7, #68]	; 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005354:	61ba      	str	r2, [r7, #24]
 8005356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6979      	ldr	r1, [r7, #20]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	613b      	str	r3, [r7, #16]
   return(result);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005376:	bf00      	nop
 8005378:	3754      	adds	r7, #84	; 0x54
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff ff77 	bl	8005290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b21      	cmp	r3, #33	; 0x21
 80053bc:	d13e      	bne.n	800543c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	d114      	bne.n	80053f2 <UART_Transmit_IT+0x48>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d110      	bne.n	80053f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]
 80053f0:	e008      	b.n	8005404 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6211      	str	r1, [r2, #32]
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4619      	mov	r1, r3
 8005412:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10f      	bne.n	8005438 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005426:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005436:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	e000      	b.n	800543e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
  }
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005460:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff fefc 	bl	8005268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b08c      	sub	sp, #48	; 0x30
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b22      	cmp	r3, #34	; 0x22
 800548c:	f040 80ab 	bne.w	80055e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d117      	bne.n	80054ca <UART_Receive_IT+0x50>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d113      	bne.n	80054ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
 80054c8:	e026      	b.n	8005518 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d007      	beq.n	80054ee <UART_Receive_IT+0x74>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <UART_Receive_IT+0x82>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e008      	b.n	800550e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005508:	b2da      	uxtb	r2, r3
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4619      	mov	r1, r3
 8005526:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005528:	2b00      	cmp	r3, #0
 800552a:	d15a      	bne.n	80055e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0220 	bic.w	r2, r2, #32
 800553a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800554a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	2b01      	cmp	r3, #1
 800556a:	d135      	bne.n	80055d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	613b      	str	r3, [r7, #16]
   return(result);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f023 0310 	bic.w	r3, r3, #16
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	623a      	str	r2, [r7, #32]
 8005594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	69f9      	ldr	r1, [r7, #28]
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	61bb      	str	r3, [r7, #24]
   return(result);
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d10a      	bne.n	80055ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff fe67 	bl	80052a4 <HAL_UARTEx_RxEventCallback>
 80055d6:	e002      	b.n	80055de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff fe4f 	bl	800527c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e002      	b.n	80055e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e000      	b.n	80055e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055e6:	2302      	movs	r3, #2
  }
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3730      	adds	r7, #48	; 0x30
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	b09f      	sub	sp, #124	; 0x7c
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005606:	68d9      	ldr	r1, [r3, #12]
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	ea40 0301 	orr.w	r3, r0, r1
 8005610:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	431a      	orrs	r2, r3
 800561c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	431a      	orrs	r2, r3
 8005622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	4313      	orrs	r3, r2
 8005628:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005634:	f021 010c 	bic.w	r1, r1, #12
 8005638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800563e:	430b      	orrs	r3, r1
 8005640:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800564c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564e:	6999      	ldr	r1, [r3, #24]
 8005650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	ea40 0301 	orr.w	r3, r0, r1
 8005658:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800565a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4bc5      	ldr	r3, [pc, #788]	; (8005974 <UART_SetConfig+0x384>)
 8005660:	429a      	cmp	r2, r3
 8005662:	d004      	beq.n	800566e <UART_SetConfig+0x7e>
 8005664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4bc3      	ldr	r3, [pc, #780]	; (8005978 <UART_SetConfig+0x388>)
 800566a:	429a      	cmp	r2, r3
 800566c:	d103      	bne.n	8005676 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800566e:	f7ff f9cb 	bl	8004a08 <HAL_RCC_GetPCLK2Freq>
 8005672:	6778      	str	r0, [r7, #116]	; 0x74
 8005674:	e002      	b.n	800567c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005676:	f7ff f9b3 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 800567a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800567c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005684:	f040 80b6 	bne.w	80057f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800568a:	461c      	mov	r4, r3
 800568c:	f04f 0500 	mov.w	r5, #0
 8005690:	4622      	mov	r2, r4
 8005692:	462b      	mov	r3, r5
 8005694:	1891      	adds	r1, r2, r2
 8005696:	6439      	str	r1, [r7, #64]	; 0x40
 8005698:	415b      	adcs	r3, r3
 800569a:	647b      	str	r3, [r7, #68]	; 0x44
 800569c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056a0:	1912      	adds	r2, r2, r4
 80056a2:	eb45 0303 	adc.w	r3, r5, r3
 80056a6:	f04f 0000 	mov.w	r0, #0
 80056aa:	f04f 0100 	mov.w	r1, #0
 80056ae:	00d9      	lsls	r1, r3, #3
 80056b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056b4:	00d0      	lsls	r0, r2, #3
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	1911      	adds	r1, r2, r4
 80056bc:	6639      	str	r1, [r7, #96]	; 0x60
 80056be:	416b      	adcs	r3, r5
 80056c0:	667b      	str	r3, [r7, #100]	; 0x64
 80056c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	461a      	mov	r2, r3
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	1891      	adds	r1, r2, r2
 80056ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80056d0:	415b      	adcs	r3, r3
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80056dc:	f7fb f92a 	bl	8000934 <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4ba5      	ldr	r3, [pc, #660]	; (800597c <UART_SetConfig+0x38c>)
 80056e6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	011e      	lsls	r6, r3, #4
 80056ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f0:	461c      	mov	r4, r3
 80056f2:	f04f 0500 	mov.w	r5, #0
 80056f6:	4622      	mov	r2, r4
 80056f8:	462b      	mov	r3, r5
 80056fa:	1891      	adds	r1, r2, r2
 80056fc:	6339      	str	r1, [r7, #48]	; 0x30
 80056fe:	415b      	adcs	r3, r3
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
 8005702:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005706:	1912      	adds	r2, r2, r4
 8005708:	eb45 0303 	adc.w	r3, r5, r3
 800570c:	f04f 0000 	mov.w	r0, #0
 8005710:	f04f 0100 	mov.w	r1, #0
 8005714:	00d9      	lsls	r1, r3, #3
 8005716:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800571a:	00d0      	lsls	r0, r2, #3
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	1911      	adds	r1, r2, r4
 8005722:	65b9      	str	r1, [r7, #88]	; 0x58
 8005724:	416b      	adcs	r3, r5
 8005726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	461a      	mov	r2, r3
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	1891      	adds	r1, r2, r2
 8005734:	62b9      	str	r1, [r7, #40]	; 0x28
 8005736:	415b      	adcs	r3, r3
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800573a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800573e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005742:	f7fb f8f7 	bl	8000934 <__aeabi_uldivmod>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	4b8c      	ldr	r3, [pc, #560]	; (800597c <UART_SetConfig+0x38c>)
 800574c:	fba3 1302 	umull	r1, r3, r3, r2
 8005750:	095b      	lsrs	r3, r3, #5
 8005752:	2164      	movs	r1, #100	; 0x64
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	3332      	adds	r3, #50	; 0x32
 800575e:	4a87      	ldr	r2, [pc, #540]	; (800597c <UART_SetConfig+0x38c>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800576c:	441e      	add	r6, r3
 800576e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005770:	4618      	mov	r0, r3
 8005772:	f04f 0100 	mov.w	r1, #0
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	1894      	adds	r4, r2, r2
 800577c:	623c      	str	r4, [r7, #32]
 800577e:	415b      	adcs	r3, r3
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
 8005782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005786:	1812      	adds	r2, r2, r0
 8005788:	eb41 0303 	adc.w	r3, r1, r3
 800578c:	f04f 0400 	mov.w	r4, #0
 8005790:	f04f 0500 	mov.w	r5, #0
 8005794:	00dd      	lsls	r5, r3, #3
 8005796:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800579a:	00d4      	lsls	r4, r2, #3
 800579c:	4622      	mov	r2, r4
 800579e:	462b      	mov	r3, r5
 80057a0:	1814      	adds	r4, r2, r0
 80057a2:	653c      	str	r4, [r7, #80]	; 0x50
 80057a4:	414b      	adcs	r3, r1
 80057a6:	657b      	str	r3, [r7, #84]	; 0x54
 80057a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	461a      	mov	r2, r3
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	1891      	adds	r1, r2, r2
 80057b4:	61b9      	str	r1, [r7, #24]
 80057b6:	415b      	adcs	r3, r3
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057c2:	f7fb f8b7 	bl	8000934 <__aeabi_uldivmod>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4b6c      	ldr	r3, [pc, #432]	; (800597c <UART_SetConfig+0x38c>)
 80057cc:	fba3 1302 	umull	r1, r3, r3, r2
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	2164      	movs	r1, #100	; 0x64
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	3332      	adds	r3, #50	; 0x32
 80057de:	4a67      	ldr	r2, [pc, #412]	; (800597c <UART_SetConfig+0x38c>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	f003 0207 	and.w	r2, r3, #7
 80057ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4432      	add	r2, r6
 80057f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057f2:	e0b9      	b.n	8005968 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f6:	461c      	mov	r4, r3
 80057f8:	f04f 0500 	mov.w	r5, #0
 80057fc:	4622      	mov	r2, r4
 80057fe:	462b      	mov	r3, r5
 8005800:	1891      	adds	r1, r2, r2
 8005802:	6139      	str	r1, [r7, #16]
 8005804:	415b      	adcs	r3, r3
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800580c:	1912      	adds	r2, r2, r4
 800580e:	eb45 0303 	adc.w	r3, r5, r3
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f04f 0100 	mov.w	r1, #0
 800581a:	00d9      	lsls	r1, r3, #3
 800581c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005820:	00d0      	lsls	r0, r2, #3
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	eb12 0804 	adds.w	r8, r2, r4
 800582a:	eb43 0905 	adc.w	r9, r3, r5
 800582e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	4618      	mov	r0, r3
 8005834:	f04f 0100 	mov.w	r1, #0
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	008b      	lsls	r3, r1, #2
 8005842:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005846:	0082      	lsls	r2, r0, #2
 8005848:	4640      	mov	r0, r8
 800584a:	4649      	mov	r1, r9
 800584c:	f7fb f872 	bl	8000934 <__aeabi_uldivmod>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4b49      	ldr	r3, [pc, #292]	; (800597c <UART_SetConfig+0x38c>)
 8005856:	fba3 2302 	umull	r2, r3, r3, r2
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	011e      	lsls	r6, r3, #4
 800585e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005860:	4618      	mov	r0, r3
 8005862:	f04f 0100 	mov.w	r1, #0
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	1894      	adds	r4, r2, r2
 800586c:	60bc      	str	r4, [r7, #8]
 800586e:	415b      	adcs	r3, r3
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005876:	1812      	adds	r2, r2, r0
 8005878:	eb41 0303 	adc.w	r3, r1, r3
 800587c:	f04f 0400 	mov.w	r4, #0
 8005880:	f04f 0500 	mov.w	r5, #0
 8005884:	00dd      	lsls	r5, r3, #3
 8005886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800588a:	00d4      	lsls	r4, r2, #3
 800588c:	4622      	mov	r2, r4
 800588e:	462b      	mov	r3, r5
 8005890:	1814      	adds	r4, r2, r0
 8005892:	64bc      	str	r4, [r7, #72]	; 0x48
 8005894:	414b      	adcs	r3, r1
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	4618      	mov	r0, r3
 800589e:	f04f 0100 	mov.w	r1, #0
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	008b      	lsls	r3, r1, #2
 80058ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058b0:	0082      	lsls	r2, r0, #2
 80058b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80058b6:	f7fb f83d 	bl	8000934 <__aeabi_uldivmod>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4b2f      	ldr	r3, [pc, #188]	; (800597c <UART_SetConfig+0x38c>)
 80058c0:	fba3 1302 	umull	r1, r3, r3, r2
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	2164      	movs	r1, #100	; 0x64
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	3332      	adds	r3, #50	; 0x32
 80058d2:	4a2a      	ldr	r2, [pc, #168]	; (800597c <UART_SetConfig+0x38c>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058de:	441e      	add	r6, r3
 80058e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e2:	4618      	mov	r0, r3
 80058e4:	f04f 0100 	mov.w	r1, #0
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	1894      	adds	r4, r2, r2
 80058ee:	603c      	str	r4, [r7, #0]
 80058f0:	415b      	adcs	r3, r3
 80058f2:	607b      	str	r3, [r7, #4]
 80058f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058f8:	1812      	adds	r2, r2, r0
 80058fa:	eb41 0303 	adc.w	r3, r1, r3
 80058fe:	f04f 0400 	mov.w	r4, #0
 8005902:	f04f 0500 	mov.w	r5, #0
 8005906:	00dd      	lsls	r5, r3, #3
 8005908:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800590c:	00d4      	lsls	r4, r2, #3
 800590e:	4622      	mov	r2, r4
 8005910:	462b      	mov	r3, r5
 8005912:	eb12 0a00 	adds.w	sl, r2, r0
 8005916:	eb43 0b01 	adc.w	fp, r3, r1
 800591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	4618      	mov	r0, r3
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	008b      	lsls	r3, r1, #2
 800592e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005932:	0082      	lsls	r2, r0, #2
 8005934:	4650      	mov	r0, sl
 8005936:	4659      	mov	r1, fp
 8005938:	f7fa fffc 	bl	8000934 <__aeabi_uldivmod>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <UART_SetConfig+0x38c>)
 8005942:	fba3 1302 	umull	r1, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2164      	movs	r1, #100	; 0x64
 800594a:	fb01 f303 	mul.w	r3, r1, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	3332      	adds	r3, #50	; 0x32
 8005954:	4a09      	ldr	r2, [pc, #36]	; (800597c <UART_SetConfig+0x38c>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4432      	add	r2, r6
 8005966:	609a      	str	r2, [r3, #8]
}
 8005968:	bf00      	nop
 800596a:	377c      	adds	r7, #124	; 0x7c
 800596c:	46bd      	mov	sp, r7
 800596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005972:	bf00      	nop
 8005974:	40011000 	.word	0x40011000
 8005978:	40011400 	.word	0x40011400
 800597c:	51eb851f 	.word	0x51eb851f

08005980 <__libc_init_array>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	4d0d      	ldr	r5, [pc, #52]	; (80059b8 <__libc_init_array+0x38>)
 8005984:	4c0d      	ldr	r4, [pc, #52]	; (80059bc <__libc_init_array+0x3c>)
 8005986:	1b64      	subs	r4, r4, r5
 8005988:	10a4      	asrs	r4, r4, #2
 800598a:	2600      	movs	r6, #0
 800598c:	42a6      	cmp	r6, r4
 800598e:	d109      	bne.n	80059a4 <__libc_init_array+0x24>
 8005990:	4d0b      	ldr	r5, [pc, #44]	; (80059c0 <__libc_init_array+0x40>)
 8005992:	4c0c      	ldr	r4, [pc, #48]	; (80059c4 <__libc_init_array+0x44>)
 8005994:	f001 f856 	bl	8006a44 <_init>
 8005998:	1b64      	subs	r4, r4, r5
 800599a:	10a4      	asrs	r4, r4, #2
 800599c:	2600      	movs	r6, #0
 800599e:	42a6      	cmp	r6, r4
 80059a0:	d105      	bne.n	80059ae <__libc_init_array+0x2e>
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a8:	4798      	blx	r3
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7ee      	b.n	800598c <__libc_init_array+0xc>
 80059ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b2:	4798      	blx	r3
 80059b4:	3601      	adds	r6, #1
 80059b6:	e7f2      	b.n	800599e <__libc_init_array+0x1e>
 80059b8:	08006c60 	.word	0x08006c60
 80059bc:	08006c60 	.word	0x08006c60
 80059c0:	08006c60 	.word	0x08006c60
 80059c4:	08006c64 	.word	0x08006c64

080059c8 <memset>:
 80059c8:	4402      	add	r2, r0
 80059ca:	4603      	mov	r3, r0
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d100      	bne.n	80059d2 <memset+0xa>
 80059d0:	4770      	bx	lr
 80059d2:	f803 1b01 	strb.w	r1, [r3], #1
 80059d6:	e7f9      	b.n	80059cc <memset+0x4>

080059d8 <sin>:
 80059d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059da:	ec53 2b10 	vmov	r2, r3, d0
 80059de:	4826      	ldr	r0, [pc, #152]	; (8005a78 <sin+0xa0>)
 80059e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80059e4:	4281      	cmp	r1, r0
 80059e6:	dc07      	bgt.n	80059f8 <sin+0x20>
 80059e8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005a70 <sin+0x98>
 80059ec:	2000      	movs	r0, #0
 80059ee:	f000 fe5b 	bl	80066a8 <__kernel_sin>
 80059f2:	ec51 0b10 	vmov	r0, r1, d0
 80059f6:	e007      	b.n	8005a08 <sin+0x30>
 80059f8:	4820      	ldr	r0, [pc, #128]	; (8005a7c <sin+0xa4>)
 80059fa:	4281      	cmp	r1, r0
 80059fc:	dd09      	ble.n	8005a12 <sin+0x3a>
 80059fe:	ee10 0a10 	vmov	r0, s0
 8005a02:	4619      	mov	r1, r3
 8005a04:	f7fa fd0e 	bl	8000424 <__aeabi_dsub>
 8005a08:	ec41 0b10 	vmov	d0, r0, r1
 8005a0c:	b005      	add	sp, #20
 8005a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a12:	4668      	mov	r0, sp
 8005a14:	f000 f834 	bl	8005a80 <__ieee754_rem_pio2>
 8005a18:	f000 0003 	and.w	r0, r0, #3
 8005a1c:	2801      	cmp	r0, #1
 8005a1e:	d008      	beq.n	8005a32 <sin+0x5a>
 8005a20:	2802      	cmp	r0, #2
 8005a22:	d00d      	beq.n	8005a40 <sin+0x68>
 8005a24:	b9d0      	cbnz	r0, 8005a5c <sin+0x84>
 8005a26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a2a:	ed9d 0b00 	vldr	d0, [sp]
 8005a2e:	2001      	movs	r0, #1
 8005a30:	e7dd      	b.n	80059ee <sin+0x16>
 8005a32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a36:	ed9d 0b00 	vldr	d0, [sp]
 8005a3a:	f000 fa2d 	bl	8005e98 <__kernel_cos>
 8005a3e:	e7d8      	b.n	80059f2 <sin+0x1a>
 8005a40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a44:	ed9d 0b00 	vldr	d0, [sp]
 8005a48:	2001      	movs	r0, #1
 8005a4a:	f000 fe2d 	bl	80066a8 <__kernel_sin>
 8005a4e:	ec53 2b10 	vmov	r2, r3, d0
 8005a52:	ee10 0a10 	vmov	r0, s0
 8005a56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005a5a:	e7d5      	b.n	8005a08 <sin+0x30>
 8005a5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a60:	ed9d 0b00 	vldr	d0, [sp]
 8005a64:	f000 fa18 	bl	8005e98 <__kernel_cos>
 8005a68:	e7f1      	b.n	8005a4e <sin+0x76>
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w
	...
 8005a78:	3fe921fb 	.word	0x3fe921fb
 8005a7c:	7fefffff 	.word	0x7fefffff

08005a80 <__ieee754_rem_pio2>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	ed2d 8b02 	vpush	{d8}
 8005a88:	ec55 4b10 	vmov	r4, r5, d0
 8005a8c:	4bca      	ldr	r3, [pc, #808]	; (8005db8 <__ieee754_rem_pio2+0x338>)
 8005a8e:	b08b      	sub	sp, #44	; 0x2c
 8005a90:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005a94:	4598      	cmp	r8, r3
 8005a96:	4682      	mov	sl, r0
 8005a98:	9502      	str	r5, [sp, #8]
 8005a9a:	dc08      	bgt.n	8005aae <__ieee754_rem_pio2+0x2e>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	ed80 0b00 	vstr	d0, [r0]
 8005aa4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005aa8:	f04f 0b00 	mov.w	fp, #0
 8005aac:	e028      	b.n	8005b00 <__ieee754_rem_pio2+0x80>
 8005aae:	4bc3      	ldr	r3, [pc, #780]	; (8005dbc <__ieee754_rem_pio2+0x33c>)
 8005ab0:	4598      	cmp	r8, r3
 8005ab2:	dc78      	bgt.n	8005ba6 <__ieee754_rem_pio2+0x126>
 8005ab4:	9b02      	ldr	r3, [sp, #8]
 8005ab6:	4ec2      	ldr	r6, [pc, #776]	; (8005dc0 <__ieee754_rem_pio2+0x340>)
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	ee10 0a10 	vmov	r0, s0
 8005abe:	a3b0      	add	r3, pc, #704	; (adr r3, 8005d80 <__ieee754_rem_pio2+0x300>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	dd39      	ble.n	8005b3c <__ieee754_rem_pio2+0xbc>
 8005ac8:	f7fa fcac 	bl	8000424 <__aeabi_dsub>
 8005acc:	45b0      	cmp	r8, r6
 8005ace:	4604      	mov	r4, r0
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	d01b      	beq.n	8005b0c <__ieee754_rem_pio2+0x8c>
 8005ad4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005d88 <__ieee754_rem_pio2+0x308>)
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f7fa fca3 	bl	8000424 <__aeabi_dsub>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	e9ca 2300 	strd	r2, r3, [sl]
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	f7fa fc9b 	bl	8000424 <__aeabi_dsub>
 8005aee:	a3a6      	add	r3, pc, #664	; (adr r3, 8005d88 <__ieee754_rem_pio2+0x308>)
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f7fa fc96 	bl	8000424 <__aeabi_dsub>
 8005af8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005afc:	f04f 0b01 	mov.w	fp, #1
 8005b00:	4658      	mov	r0, fp
 8005b02:	b00b      	add	sp, #44	; 0x2c
 8005b04:	ecbd 8b02 	vpop	{d8}
 8005b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b0c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005d90 <__ieee754_rem_pio2+0x310>)
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f7fa fc87 	bl	8000424 <__aeabi_dsub>
 8005b16:	a3a0      	add	r3, pc, #640	; (adr r3, 8005d98 <__ieee754_rem_pio2+0x318>)
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	460d      	mov	r5, r1
 8005b20:	f7fa fc80 	bl	8000424 <__aeabi_dsub>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	e9ca 2300 	strd	r2, r3, [sl]
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	4629      	mov	r1, r5
 8005b30:	f7fa fc78 	bl	8000424 <__aeabi_dsub>
 8005b34:	a398      	add	r3, pc, #608	; (adr r3, 8005d98 <__ieee754_rem_pio2+0x318>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	e7db      	b.n	8005af4 <__ieee754_rem_pio2+0x74>
 8005b3c:	f7fa fc74 	bl	8000428 <__adddf3>
 8005b40:	45b0      	cmp	r8, r6
 8005b42:	4604      	mov	r4, r0
 8005b44:	460d      	mov	r5, r1
 8005b46:	d016      	beq.n	8005b76 <__ieee754_rem_pio2+0xf6>
 8005b48:	a38f      	add	r3, pc, #572	; (adr r3, 8005d88 <__ieee754_rem_pio2+0x308>)
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	f7fa fc6b 	bl	8000428 <__adddf3>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	e9ca 2300 	strd	r2, r3, [sl]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	f7fa fc61 	bl	8000424 <__aeabi_dsub>
 8005b62:	a389      	add	r3, pc, #548	; (adr r3, 8005d88 <__ieee754_rem_pio2+0x308>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa fc5e 	bl	8000428 <__adddf3>
 8005b6c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005b70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b74:	e7c4      	b.n	8005b00 <__ieee754_rem_pio2+0x80>
 8005b76:	a386      	add	r3, pc, #536	; (adr r3, 8005d90 <__ieee754_rem_pio2+0x310>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f7fa fc54 	bl	8000428 <__adddf3>
 8005b80:	a385      	add	r3, pc, #532	; (adr r3, 8005d98 <__ieee754_rem_pio2+0x318>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	4604      	mov	r4, r0
 8005b88:	460d      	mov	r5, r1
 8005b8a:	f7fa fc4d 	bl	8000428 <__adddf3>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	e9ca 2300 	strd	r2, r3, [sl]
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f7fa fc43 	bl	8000424 <__aeabi_dsub>
 8005b9e:	a37e      	add	r3, pc, #504	; (adr r3, 8005d98 <__ieee754_rem_pio2+0x318>)
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	e7e0      	b.n	8005b68 <__ieee754_rem_pio2+0xe8>
 8005ba6:	4b87      	ldr	r3, [pc, #540]	; (8005dc4 <__ieee754_rem_pio2+0x344>)
 8005ba8:	4598      	cmp	r8, r3
 8005baa:	f300 80d9 	bgt.w	8005d60 <__ieee754_rem_pio2+0x2e0>
 8005bae:	f000 fe39 	bl	8006824 <fabs>
 8005bb2:	ec55 4b10 	vmov	r4, r5, d0
 8005bb6:	ee10 0a10 	vmov	r0, s0
 8005bba:	a379      	add	r3, pc, #484	; (adr r3, 8005da0 <__ieee754_rem_pio2+0x320>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa fb01 	bl	80001c8 <__aeabi_dmul>
 8005bc6:	4b80      	ldr	r3, [pc, #512]	; (8005dc8 <__ieee754_rem_pio2+0x348>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f7fa fc2d 	bl	8000428 <__adddf3>
 8005bce:	f7fa fe69 	bl	80008a4 <__aeabi_d2iz>
 8005bd2:	4683      	mov	fp, r0
 8005bd4:	f7fa fd74 	bl	80006c0 <__aeabi_i2d>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	ec43 2b18 	vmov	d8, r2, r3
 8005be0:	a367      	add	r3, pc, #412	; (adr r3, 8005d80 <__ieee754_rem_pio2+0x300>)
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f7fa faef 	bl	80001c8 <__aeabi_dmul>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	f7fa fc17 	bl	8000424 <__aeabi_dsub>
 8005bf6:	a364      	add	r3, pc, #400	; (adr r3, 8005d88 <__ieee754_rem_pio2+0x308>)
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	460f      	mov	r7, r1
 8005c00:	ec51 0b18 	vmov	r0, r1, d8
 8005c04:	f7fa fae0 	bl	80001c8 <__aeabi_dmul>
 8005c08:	f1bb 0f1f 	cmp.w	fp, #31
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	460d      	mov	r5, r1
 8005c10:	dc0d      	bgt.n	8005c2e <__ieee754_rem_pio2+0x1ae>
 8005c12:	4b6e      	ldr	r3, [pc, #440]	; (8005dcc <__ieee754_rem_pio2+0x34c>)
 8005c14:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1c:	4543      	cmp	r3, r8
 8005c1e:	d006      	beq.n	8005c2e <__ieee754_rem_pio2+0x1ae>
 8005c20:	4622      	mov	r2, r4
 8005c22:	462b      	mov	r3, r5
 8005c24:	4630      	mov	r0, r6
 8005c26:	4639      	mov	r1, r7
 8005c28:	f7fa fbfc 	bl	8000424 <__aeabi_dsub>
 8005c2c:	e00f      	b.n	8005c4e <__ieee754_rem_pio2+0x1ce>
 8005c2e:	462b      	mov	r3, r5
 8005c30:	4622      	mov	r2, r4
 8005c32:	4630      	mov	r0, r6
 8005c34:	4639      	mov	r1, r7
 8005c36:	f7fa fbf5 	bl	8000424 <__aeabi_dsub>
 8005c3a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005c3e:	9303      	str	r3, [sp, #12]
 8005c40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c44:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005c48:	f1b8 0f10 	cmp.w	r8, #16
 8005c4c:	dc02      	bgt.n	8005c54 <__ieee754_rem_pio2+0x1d4>
 8005c4e:	e9ca 0100 	strd	r0, r1, [sl]
 8005c52:	e039      	b.n	8005cc8 <__ieee754_rem_pio2+0x248>
 8005c54:	a34e      	add	r3, pc, #312	; (adr r3, 8005d90 <__ieee754_rem_pio2+0x310>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	ec51 0b18 	vmov	r0, r1, d8
 8005c5e:	f7fa fab3 	bl	80001c8 <__aeabi_dmul>
 8005c62:	4604      	mov	r4, r0
 8005c64:	460d      	mov	r5, r1
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	f7fa fbd9 	bl	8000424 <__aeabi_dsub>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4680      	mov	r8, r0
 8005c78:	4689      	mov	r9, r1
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	f7fa fbd1 	bl	8000424 <__aeabi_dsub>
 8005c82:	4622      	mov	r2, r4
 8005c84:	462b      	mov	r3, r5
 8005c86:	f7fa fbcd 	bl	8000424 <__aeabi_dsub>
 8005c8a:	a343      	add	r3, pc, #268	; (adr r3, 8005d98 <__ieee754_rem_pio2+0x318>)
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	4604      	mov	r4, r0
 8005c92:	460d      	mov	r5, r1
 8005c94:	ec51 0b18 	vmov	r0, r1, d8
 8005c98:	f7fa fa96 	bl	80001c8 <__aeabi_dmul>
 8005c9c:	4622      	mov	r2, r4
 8005c9e:	462b      	mov	r3, r5
 8005ca0:	f7fa fbc0 	bl	8000424 <__aeabi_dsub>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4604      	mov	r4, r0
 8005caa:	460d      	mov	r5, r1
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f7fa fbb8 	bl	8000424 <__aeabi_dsub>
 8005cb4:	9a03      	ldr	r2, [sp, #12]
 8005cb6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b31      	cmp	r3, #49	; 0x31
 8005cbe:	dc24      	bgt.n	8005d0a <__ieee754_rem_pio2+0x28a>
 8005cc0:	e9ca 0100 	strd	r0, r1, [sl]
 8005cc4:	4646      	mov	r6, r8
 8005cc6:	464f      	mov	r7, r9
 8005cc8:	e9da 8900 	ldrd	r8, r9, [sl]
 8005ccc:	4630      	mov	r0, r6
 8005cce:	4642      	mov	r2, r8
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	f7fa fba6 	bl	8000424 <__aeabi_dsub>
 8005cd8:	462b      	mov	r3, r5
 8005cda:	4622      	mov	r2, r4
 8005cdc:	f7fa fba2 	bl	8000424 <__aeabi_dsub>
 8005ce0:	9b02      	ldr	r3, [sp, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005ce8:	f6bf af0a 	bge.w	8005b00 <__ieee754_rem_pio2+0x80>
 8005cec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005cf0:	f8ca 3004 	str.w	r3, [sl, #4]
 8005cf4:	f8ca 8000 	str.w	r8, [sl]
 8005cf8:	f8ca 0008 	str.w	r0, [sl, #8]
 8005cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d00:	f8ca 300c 	str.w	r3, [sl, #12]
 8005d04:	f1cb 0b00 	rsb	fp, fp, #0
 8005d08:	e6fa      	b.n	8005b00 <__ieee754_rem_pio2+0x80>
 8005d0a:	a327      	add	r3, pc, #156	; (adr r3, 8005da8 <__ieee754_rem_pio2+0x328>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	ec51 0b18 	vmov	r0, r1, d8
 8005d14:	f7fa fa58 	bl	80001c8 <__aeabi_dmul>
 8005d18:	4604      	mov	r4, r0
 8005d1a:	460d      	mov	r5, r1
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4640      	mov	r0, r8
 8005d22:	4649      	mov	r1, r9
 8005d24:	f7fa fb7e 	bl	8000424 <__aeabi_dsub>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	460f      	mov	r7, r1
 8005d30:	4640      	mov	r0, r8
 8005d32:	4649      	mov	r1, r9
 8005d34:	f7fa fb76 	bl	8000424 <__aeabi_dsub>
 8005d38:	4622      	mov	r2, r4
 8005d3a:	462b      	mov	r3, r5
 8005d3c:	f7fa fb72 	bl	8000424 <__aeabi_dsub>
 8005d40:	a31b      	add	r3, pc, #108	; (adr r3, 8005db0 <__ieee754_rem_pio2+0x330>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	4604      	mov	r4, r0
 8005d48:	460d      	mov	r5, r1
 8005d4a:	ec51 0b18 	vmov	r0, r1, d8
 8005d4e:	f7fa fa3b 	bl	80001c8 <__aeabi_dmul>
 8005d52:	4622      	mov	r2, r4
 8005d54:	462b      	mov	r3, r5
 8005d56:	f7fa fb65 	bl	8000424 <__aeabi_dsub>
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	e75f      	b.n	8005c20 <__ieee754_rem_pio2+0x1a0>
 8005d60:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <__ieee754_rem_pio2+0x350>)
 8005d62:	4598      	cmp	r8, r3
 8005d64:	dd36      	ble.n	8005dd4 <__ieee754_rem_pio2+0x354>
 8005d66:	ee10 2a10 	vmov	r2, s0
 8005d6a:	462b      	mov	r3, r5
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa fb58 	bl	8000424 <__aeabi_dsub>
 8005d74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d78:	e9ca 0100 	strd	r0, r1, [sl]
 8005d7c:	e694      	b.n	8005aa8 <__ieee754_rem_pio2+0x28>
 8005d7e:	bf00      	nop
 8005d80:	54400000 	.word	0x54400000
 8005d84:	3ff921fb 	.word	0x3ff921fb
 8005d88:	1a626331 	.word	0x1a626331
 8005d8c:	3dd0b461 	.word	0x3dd0b461
 8005d90:	1a600000 	.word	0x1a600000
 8005d94:	3dd0b461 	.word	0x3dd0b461
 8005d98:	2e037073 	.word	0x2e037073
 8005d9c:	3ba3198a 	.word	0x3ba3198a
 8005da0:	6dc9c883 	.word	0x6dc9c883
 8005da4:	3fe45f30 	.word	0x3fe45f30
 8005da8:	2e000000 	.word	0x2e000000
 8005dac:	3ba3198a 	.word	0x3ba3198a
 8005db0:	252049c1 	.word	0x252049c1
 8005db4:	397b839a 	.word	0x397b839a
 8005db8:	3fe921fb 	.word	0x3fe921fb
 8005dbc:	4002d97b 	.word	0x4002d97b
 8005dc0:	3ff921fb 	.word	0x3ff921fb
 8005dc4:	413921fb 	.word	0x413921fb
 8005dc8:	3fe00000 	.word	0x3fe00000
 8005dcc:	08006a80 	.word	0x08006a80
 8005dd0:	7fefffff 	.word	0x7fefffff
 8005dd4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005dd8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005ddc:	ee10 0a10 	vmov	r0, s0
 8005de0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005de4:	ee10 6a10 	vmov	r6, s0
 8005de8:	460f      	mov	r7, r1
 8005dea:	f7fa fd5b 	bl	80008a4 <__aeabi_d2iz>
 8005dee:	f7fa fc67 	bl	80006c0 <__aeabi_i2d>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4630      	mov	r0, r6
 8005df8:	4639      	mov	r1, r7
 8005dfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005dfe:	f7fa fb11 	bl	8000424 <__aeabi_dsub>
 8005e02:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <__ieee754_rem_pio2+0x40c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	f7fa f9df 	bl	80001c8 <__aeabi_dmul>
 8005e0a:	460f      	mov	r7, r1
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	f7fa fd49 	bl	80008a4 <__aeabi_d2iz>
 8005e12:	f7fa fc55 	bl	80006c0 <__aeabi_i2d>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	4639      	mov	r1, r7
 8005e1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e22:	f7fa faff 	bl	8000424 <__aeabi_dsub>
 8005e26:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <__ieee754_rem_pio2+0x40c>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f7fa f9cd 	bl	80001c8 <__aeabi_dmul>
 8005e2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005e32:	ad04      	add	r5, sp, #16
 8005e34:	f04f 0803 	mov.w	r8, #3
 8005e38:	46a9      	mov	r9, r5
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	2700      	movs	r7, #0
 8005e3e:	4632      	mov	r2, r6
 8005e40:	463b      	mov	r3, r7
 8005e42:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005e46:	46c3      	mov	fp, r8
 8005e48:	3d08      	subs	r5, #8
 8005e4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005e4e:	f7fa fcf7 	bl	8000840 <__aeabi_dcmpeq>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d1f3      	bne.n	8005e3e <__ieee754_rem_pio2+0x3be>
 8005e56:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <__ieee754_rem_pio2+0x410>)
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	4622      	mov	r2, r4
 8005e60:	465b      	mov	r3, fp
 8005e62:	4651      	mov	r1, sl
 8005e64:	4648      	mov	r0, r9
 8005e66:	f000 f8df 	bl	8006028 <__kernel_rem_pio2>
 8005e6a:	9b02      	ldr	r3, [sp, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	4683      	mov	fp, r0
 8005e70:	f6bf ae46 	bge.w	8005b00 <__ieee754_rem_pio2+0x80>
 8005e74:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005e78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e7c:	f8ca 3004 	str.w	r3, [sl, #4]
 8005e80:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005e84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005e88:	e73a      	b.n	8005d00 <__ieee754_rem_pio2+0x280>
 8005e8a:	bf00      	nop
 8005e8c:	41700000 	.word	0x41700000
 8005e90:	08006b00 	.word	0x08006b00
 8005e94:	00000000 	.word	0x00000000

08005e98 <__kernel_cos>:
 8005e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	ec57 6b10 	vmov	r6, r7, d0
 8005ea0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005ea4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005ea8:	ed8d 1b00 	vstr	d1, [sp]
 8005eac:	da07      	bge.n	8005ebe <__kernel_cos+0x26>
 8005eae:	ee10 0a10 	vmov	r0, s0
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa fcf6 	bl	80008a4 <__aeabi_d2iz>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	f000 8088 	beq.w	8005fce <__kernel_cos+0x136>
 8005ebe:	4632      	mov	r2, r6
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	f7fa f97f 	bl	80001c8 <__aeabi_dmul>
 8005eca:	4b51      	ldr	r3, [pc, #324]	; (8006010 <__kernel_cos+0x178>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	460d      	mov	r5, r1
 8005ed2:	f7fa f979 	bl	80001c8 <__aeabi_dmul>
 8005ed6:	a340      	add	r3, pc, #256	; (adr r3, 8005fd8 <__kernel_cos+0x140>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	4682      	mov	sl, r0
 8005ede:	468b      	mov	fp, r1
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	f7fa f970 	bl	80001c8 <__aeabi_dmul>
 8005ee8:	a33d      	add	r3, pc, #244	; (adr r3, 8005fe0 <__kernel_cos+0x148>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fa9b 	bl	8000428 <__adddf3>
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	f7fa f967 	bl	80001c8 <__aeabi_dmul>
 8005efa:	a33b      	add	r3, pc, #236	; (adr r3, 8005fe8 <__kernel_cos+0x150>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa fa90 	bl	8000424 <__aeabi_dsub>
 8005f04:	4622      	mov	r2, r4
 8005f06:	462b      	mov	r3, r5
 8005f08:	f7fa f95e 	bl	80001c8 <__aeabi_dmul>
 8005f0c:	a338      	add	r3, pc, #224	; (adr r3, 8005ff0 <__kernel_cos+0x158>)
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f7fa fa89 	bl	8000428 <__adddf3>
 8005f16:	4622      	mov	r2, r4
 8005f18:	462b      	mov	r3, r5
 8005f1a:	f7fa f955 	bl	80001c8 <__aeabi_dmul>
 8005f1e:	a336      	add	r3, pc, #216	; (adr r3, 8005ff8 <__kernel_cos+0x160>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f7fa fa7e 	bl	8000424 <__aeabi_dsub>
 8005f28:	4622      	mov	r2, r4
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	f7fa f94c 	bl	80001c8 <__aeabi_dmul>
 8005f30:	a333      	add	r3, pc, #204	; (adr r3, 8006000 <__kernel_cos+0x168>)
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa fa77 	bl	8000428 <__adddf3>
 8005f3a:	4622      	mov	r2, r4
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	f7fa f943 	bl	80001c8 <__aeabi_dmul>
 8005f42:	4622      	mov	r2, r4
 8005f44:	462b      	mov	r3, r5
 8005f46:	f7fa f93f 	bl	80001c8 <__aeabi_dmul>
 8005f4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f4e:	4604      	mov	r4, r0
 8005f50:	460d      	mov	r5, r1
 8005f52:	4630      	mov	r0, r6
 8005f54:	4639      	mov	r1, r7
 8005f56:	f7fa f937 	bl	80001c8 <__aeabi_dmul>
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4629      	mov	r1, r5
 8005f60:	4620      	mov	r0, r4
 8005f62:	f7fa fa5f 	bl	8000424 <__aeabi_dsub>
 8005f66:	4b2b      	ldr	r3, [pc, #172]	; (8006014 <__kernel_cos+0x17c>)
 8005f68:	4598      	cmp	r8, r3
 8005f6a:	4606      	mov	r6, r0
 8005f6c:	460f      	mov	r7, r1
 8005f6e:	dc10      	bgt.n	8005f92 <__kernel_cos+0xfa>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4650      	mov	r0, sl
 8005f76:	4659      	mov	r1, fp
 8005f78:	f7fa fa54 	bl	8000424 <__aeabi_dsub>
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4926      	ldr	r1, [pc, #152]	; (8006018 <__kernel_cos+0x180>)
 8005f80:	4602      	mov	r2, r0
 8005f82:	2000      	movs	r0, #0
 8005f84:	f7fa fa4e 	bl	8000424 <__aeabi_dsub>
 8005f88:	ec41 0b10 	vmov	d0, r0, r1
 8005f8c:	b003      	add	sp, #12
 8005f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f92:	4b22      	ldr	r3, [pc, #136]	; (800601c <__kernel_cos+0x184>)
 8005f94:	4920      	ldr	r1, [pc, #128]	; (8006018 <__kernel_cos+0x180>)
 8005f96:	4598      	cmp	r8, r3
 8005f98:	bfcc      	ite	gt
 8005f9a:	4d21      	ldrgt	r5, [pc, #132]	; (8006020 <__kernel_cos+0x188>)
 8005f9c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005fa0:	2400      	movs	r4, #0
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f7fa fa3c 	bl	8000424 <__aeabi_dsub>
 8005fac:	4622      	mov	r2, r4
 8005fae:	4680      	mov	r8, r0
 8005fb0:	4689      	mov	r9, r1
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	4650      	mov	r0, sl
 8005fb6:	4659      	mov	r1, fp
 8005fb8:	f7fa fa34 	bl	8000424 <__aeabi_dsub>
 8005fbc:	4632      	mov	r2, r6
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	f7fa fa30 	bl	8000424 <__aeabi_dsub>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4640      	mov	r0, r8
 8005fca:	4649      	mov	r1, r9
 8005fcc:	e7da      	b.n	8005f84 <__kernel_cos+0xec>
 8005fce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006008 <__kernel_cos+0x170>
 8005fd2:	e7db      	b.n	8005f8c <__kernel_cos+0xf4>
 8005fd4:	f3af 8000 	nop.w
 8005fd8:	be8838d4 	.word	0xbe8838d4
 8005fdc:	bda8fae9 	.word	0xbda8fae9
 8005fe0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005fe4:	3e21ee9e 	.word	0x3e21ee9e
 8005fe8:	809c52ad 	.word	0x809c52ad
 8005fec:	3e927e4f 	.word	0x3e927e4f
 8005ff0:	19cb1590 	.word	0x19cb1590
 8005ff4:	3efa01a0 	.word	0x3efa01a0
 8005ff8:	16c15177 	.word	0x16c15177
 8005ffc:	3f56c16c 	.word	0x3f56c16c
 8006000:	5555554c 	.word	0x5555554c
 8006004:	3fa55555 	.word	0x3fa55555
 8006008:	00000000 	.word	0x00000000
 800600c:	3ff00000 	.word	0x3ff00000
 8006010:	3fe00000 	.word	0x3fe00000
 8006014:	3fd33332 	.word	0x3fd33332
 8006018:	3ff00000 	.word	0x3ff00000
 800601c:	3fe90000 	.word	0x3fe90000
 8006020:	3fd20000 	.word	0x3fd20000
 8006024:	00000000 	.word	0x00000000

08006028 <__kernel_rem_pio2>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	ed2d 8b02 	vpush	{d8}
 8006030:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006034:	f112 0f14 	cmn.w	r2, #20
 8006038:	9308      	str	r3, [sp, #32]
 800603a:	9101      	str	r1, [sp, #4]
 800603c:	4bc6      	ldr	r3, [pc, #792]	; (8006358 <__kernel_rem_pio2+0x330>)
 800603e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006040:	9009      	str	r0, [sp, #36]	; 0x24
 8006042:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006046:	9304      	str	r3, [sp, #16]
 8006048:	9b08      	ldr	r3, [sp, #32]
 800604a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800604e:	bfa8      	it	ge
 8006050:	1ed4      	subge	r4, r2, #3
 8006052:	9306      	str	r3, [sp, #24]
 8006054:	bfb2      	itee	lt
 8006056:	2400      	movlt	r4, #0
 8006058:	2318      	movge	r3, #24
 800605a:	fb94 f4f3 	sdivge	r4, r4, r3
 800605e:	f06f 0317 	mvn.w	r3, #23
 8006062:	fb04 3303 	mla	r3, r4, r3, r3
 8006066:	eb03 0a02 	add.w	sl, r3, r2
 800606a:	9b04      	ldr	r3, [sp, #16]
 800606c:	9a06      	ldr	r2, [sp, #24]
 800606e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006348 <__kernel_rem_pio2+0x320>
 8006072:	eb03 0802 	add.w	r8, r3, r2
 8006076:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006078:	1aa7      	subs	r7, r4, r2
 800607a:	ae20      	add	r6, sp, #128	; 0x80
 800607c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006080:	2500      	movs	r5, #0
 8006082:	4545      	cmp	r5, r8
 8006084:	dd18      	ble.n	80060b8 <__kernel_rem_pio2+0x90>
 8006086:	9b08      	ldr	r3, [sp, #32]
 8006088:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800608c:	aa20      	add	r2, sp, #128	; 0x80
 800608e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006348 <__kernel_rem_pio2+0x320>
 8006092:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006096:	f1c3 0301 	rsb	r3, r3, #1
 800609a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800609e:	9307      	str	r3, [sp, #28]
 80060a0:	9b07      	ldr	r3, [sp, #28]
 80060a2:	9a04      	ldr	r2, [sp, #16]
 80060a4:	4443      	add	r3, r8
 80060a6:	429a      	cmp	r2, r3
 80060a8:	db2f      	blt.n	800610a <__kernel_rem_pio2+0xe2>
 80060aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80060ae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80060b2:	462f      	mov	r7, r5
 80060b4:	2600      	movs	r6, #0
 80060b6:	e01b      	b.n	80060f0 <__kernel_rem_pio2+0xc8>
 80060b8:	42ef      	cmn	r7, r5
 80060ba:	d407      	bmi.n	80060cc <__kernel_rem_pio2+0xa4>
 80060bc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80060c0:	f7fa fafe 	bl	80006c0 <__aeabi_i2d>
 80060c4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80060c8:	3501      	adds	r5, #1
 80060ca:	e7da      	b.n	8006082 <__kernel_rem_pio2+0x5a>
 80060cc:	ec51 0b18 	vmov	r0, r1, d8
 80060d0:	e7f8      	b.n	80060c4 <__kernel_rem_pio2+0x9c>
 80060d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80060da:	f7fa f875 	bl	80001c8 <__aeabi_dmul>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e6:	f7fa f99f 	bl	8000428 <__adddf3>
 80060ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ee:	3601      	adds	r6, #1
 80060f0:	9b06      	ldr	r3, [sp, #24]
 80060f2:	429e      	cmp	r6, r3
 80060f4:	f1a7 0708 	sub.w	r7, r7, #8
 80060f8:	ddeb      	ble.n	80060d2 <__kernel_rem_pio2+0xaa>
 80060fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060fe:	3508      	adds	r5, #8
 8006100:	ecab 7b02 	vstmia	fp!, {d7}
 8006104:	f108 0801 	add.w	r8, r8, #1
 8006108:	e7ca      	b.n	80060a0 <__kernel_rem_pio2+0x78>
 800610a:	9b04      	ldr	r3, [sp, #16]
 800610c:	aa0c      	add	r2, sp, #48	; 0x30
 800610e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006112:	930b      	str	r3, [sp, #44]	; 0x2c
 8006114:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006116:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800611a:	9c04      	ldr	r4, [sp, #16]
 800611c:	930a      	str	r3, [sp, #40]	; 0x28
 800611e:	ab98      	add	r3, sp, #608	; 0x260
 8006120:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006124:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006128:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800612c:	f8cd b008 	str.w	fp, [sp, #8]
 8006130:	4625      	mov	r5, r4
 8006132:	2d00      	cmp	r5, #0
 8006134:	dc78      	bgt.n	8006228 <__kernel_rem_pio2+0x200>
 8006136:	ec47 6b10 	vmov	d0, r6, r7
 800613a:	4650      	mov	r0, sl
 800613c:	f000 fbfc 	bl	8006938 <scalbn>
 8006140:	ec57 6b10 	vmov	r6, r7, d0
 8006144:	2200      	movs	r2, #0
 8006146:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800614a:	ee10 0a10 	vmov	r0, s0
 800614e:	4639      	mov	r1, r7
 8006150:	f7fa f83a 	bl	80001c8 <__aeabi_dmul>
 8006154:	ec41 0b10 	vmov	d0, r0, r1
 8006158:	f000 fb6e 	bl	8006838 <floor>
 800615c:	4b7f      	ldr	r3, [pc, #508]	; (800635c <__kernel_rem_pio2+0x334>)
 800615e:	ec51 0b10 	vmov	r0, r1, d0
 8006162:	2200      	movs	r2, #0
 8006164:	f7fa f830 	bl	80001c8 <__aeabi_dmul>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7fa f958 	bl	8000424 <__aeabi_dsub>
 8006174:	460f      	mov	r7, r1
 8006176:	4606      	mov	r6, r0
 8006178:	f7fa fb94 	bl	80008a4 <__aeabi_d2iz>
 800617c:	9007      	str	r0, [sp, #28]
 800617e:	f7fa fa9f 	bl	80006c0 <__aeabi_i2d>
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	4630      	mov	r0, r6
 8006188:	4639      	mov	r1, r7
 800618a:	f7fa f94b 	bl	8000424 <__aeabi_dsub>
 800618e:	f1ba 0f00 	cmp.w	sl, #0
 8006192:	4606      	mov	r6, r0
 8006194:	460f      	mov	r7, r1
 8006196:	dd70      	ble.n	800627a <__kernel_rem_pio2+0x252>
 8006198:	1e62      	subs	r2, r4, #1
 800619a:	ab0c      	add	r3, sp, #48	; 0x30
 800619c:	9d07      	ldr	r5, [sp, #28]
 800619e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80061a2:	f1ca 0118 	rsb	r1, sl, #24
 80061a6:	fa40 f301 	asr.w	r3, r0, r1
 80061aa:	441d      	add	r5, r3
 80061ac:	408b      	lsls	r3, r1
 80061ae:	1ac0      	subs	r0, r0, r3
 80061b0:	ab0c      	add	r3, sp, #48	; 0x30
 80061b2:	9507      	str	r5, [sp, #28]
 80061b4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80061b8:	f1ca 0317 	rsb	r3, sl, #23
 80061bc:	fa40 f303 	asr.w	r3, r0, r3
 80061c0:	9302      	str	r3, [sp, #8]
 80061c2:	9b02      	ldr	r3, [sp, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	dd66      	ble.n	8006296 <__kernel_rem_pio2+0x26e>
 80061c8:	9b07      	ldr	r3, [sp, #28]
 80061ca:	2200      	movs	r2, #0
 80061cc:	3301      	adds	r3, #1
 80061ce:	9307      	str	r3, [sp, #28]
 80061d0:	4615      	mov	r5, r2
 80061d2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80061d6:	4294      	cmp	r4, r2
 80061d8:	f300 8099 	bgt.w	800630e <__kernel_rem_pio2+0x2e6>
 80061dc:	f1ba 0f00 	cmp.w	sl, #0
 80061e0:	dd07      	ble.n	80061f2 <__kernel_rem_pio2+0x1ca>
 80061e2:	f1ba 0f01 	cmp.w	sl, #1
 80061e6:	f000 80a5 	beq.w	8006334 <__kernel_rem_pio2+0x30c>
 80061ea:	f1ba 0f02 	cmp.w	sl, #2
 80061ee:	f000 80c1 	beq.w	8006374 <__kernel_rem_pio2+0x34c>
 80061f2:	9b02      	ldr	r3, [sp, #8]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d14e      	bne.n	8006296 <__kernel_rem_pio2+0x26e>
 80061f8:	4632      	mov	r2, r6
 80061fa:	463b      	mov	r3, r7
 80061fc:	4958      	ldr	r1, [pc, #352]	; (8006360 <__kernel_rem_pio2+0x338>)
 80061fe:	2000      	movs	r0, #0
 8006200:	f7fa f910 	bl	8000424 <__aeabi_dsub>
 8006204:	4606      	mov	r6, r0
 8006206:	460f      	mov	r7, r1
 8006208:	2d00      	cmp	r5, #0
 800620a:	d044      	beq.n	8006296 <__kernel_rem_pio2+0x26e>
 800620c:	4650      	mov	r0, sl
 800620e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006350 <__kernel_rem_pio2+0x328>
 8006212:	f000 fb91 	bl	8006938 <scalbn>
 8006216:	4630      	mov	r0, r6
 8006218:	4639      	mov	r1, r7
 800621a:	ec53 2b10 	vmov	r2, r3, d0
 800621e:	f7fa f901 	bl	8000424 <__aeabi_dsub>
 8006222:	4606      	mov	r6, r0
 8006224:	460f      	mov	r7, r1
 8006226:	e036      	b.n	8006296 <__kernel_rem_pio2+0x26e>
 8006228:	4b4e      	ldr	r3, [pc, #312]	; (8006364 <__kernel_rem_pio2+0x33c>)
 800622a:	2200      	movs	r2, #0
 800622c:	4630      	mov	r0, r6
 800622e:	4639      	mov	r1, r7
 8006230:	f7f9 ffca 	bl	80001c8 <__aeabi_dmul>
 8006234:	f7fa fb36 	bl	80008a4 <__aeabi_d2iz>
 8006238:	f7fa fa42 	bl	80006c0 <__aeabi_i2d>
 800623c:	4b4a      	ldr	r3, [pc, #296]	; (8006368 <__kernel_rem_pio2+0x340>)
 800623e:	2200      	movs	r2, #0
 8006240:	4680      	mov	r8, r0
 8006242:	4689      	mov	r9, r1
 8006244:	f7f9 ffc0 	bl	80001c8 <__aeabi_dmul>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4630      	mov	r0, r6
 800624e:	4639      	mov	r1, r7
 8006250:	f7fa f8e8 	bl	8000424 <__aeabi_dsub>
 8006254:	f7fa fb26 	bl	80008a4 <__aeabi_d2iz>
 8006258:	9b02      	ldr	r3, [sp, #8]
 800625a:	f843 0b04 	str.w	r0, [r3], #4
 800625e:	3d01      	subs	r5, #1
 8006260:	9302      	str	r3, [sp, #8]
 8006262:	ab70      	add	r3, sp, #448	; 0x1c0
 8006264:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	4640      	mov	r0, r8
 800626e:	4649      	mov	r1, r9
 8006270:	f7fa f8da 	bl	8000428 <__adddf3>
 8006274:	4606      	mov	r6, r0
 8006276:	460f      	mov	r7, r1
 8006278:	e75b      	b.n	8006132 <__kernel_rem_pio2+0x10a>
 800627a:	d105      	bne.n	8006288 <__kernel_rem_pio2+0x260>
 800627c:	1e63      	subs	r3, r4, #1
 800627e:	aa0c      	add	r2, sp, #48	; 0x30
 8006280:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006284:	15c3      	asrs	r3, r0, #23
 8006286:	e79b      	b.n	80061c0 <__kernel_rem_pio2+0x198>
 8006288:	4b38      	ldr	r3, [pc, #224]	; (800636c <__kernel_rem_pio2+0x344>)
 800628a:	2200      	movs	r2, #0
 800628c:	f7fa faf6 	bl	800087c <__aeabi_dcmpge>
 8006290:	2800      	cmp	r0, #0
 8006292:	d139      	bne.n	8006308 <__kernel_rem_pio2+0x2e0>
 8006294:	9002      	str	r0, [sp, #8]
 8006296:	2200      	movs	r2, #0
 8006298:	2300      	movs	r3, #0
 800629a:	4630      	mov	r0, r6
 800629c:	4639      	mov	r1, r7
 800629e:	f7fa facf 	bl	8000840 <__aeabi_dcmpeq>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f000 80b4 	beq.w	8006410 <__kernel_rem_pio2+0x3e8>
 80062a8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80062ac:	465b      	mov	r3, fp
 80062ae:	2200      	movs	r2, #0
 80062b0:	9904      	ldr	r1, [sp, #16]
 80062b2:	428b      	cmp	r3, r1
 80062b4:	da65      	bge.n	8006382 <__kernel_rem_pio2+0x35a>
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	d07b      	beq.n	80063b2 <__kernel_rem_pio2+0x38a>
 80062ba:	ab0c      	add	r3, sp, #48	; 0x30
 80062bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80062c0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80a0 	beq.w	800640a <__kernel_rem_pio2+0x3e2>
 80062ca:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006350 <__kernel_rem_pio2+0x328>
 80062ce:	4650      	mov	r0, sl
 80062d0:	f000 fb32 	bl	8006938 <scalbn>
 80062d4:	4f23      	ldr	r7, [pc, #140]	; (8006364 <__kernel_rem_pio2+0x33c>)
 80062d6:	ec55 4b10 	vmov	r4, r5, d0
 80062da:	46d8      	mov	r8, fp
 80062dc:	2600      	movs	r6, #0
 80062de:	f1b8 0f00 	cmp.w	r8, #0
 80062e2:	f280 80cf 	bge.w	8006484 <__kernel_rem_pio2+0x45c>
 80062e6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006348 <__kernel_rem_pio2+0x320>
 80062ea:	465f      	mov	r7, fp
 80062ec:	f04f 0800 	mov.w	r8, #0
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	f2c0 80fd 	blt.w	80064f0 <__kernel_rem_pio2+0x4c8>
 80062f6:	ab70      	add	r3, sp, #448	; 0x1c0
 80062f8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006370 <__kernel_rem_pio2+0x348>
 80062fc:	ec55 4b18 	vmov	r4, r5, d8
 8006300:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006304:	2600      	movs	r6, #0
 8006306:	e0e5      	b.n	80064d4 <__kernel_rem_pio2+0x4ac>
 8006308:	2302      	movs	r3, #2
 800630a:	9302      	str	r3, [sp, #8]
 800630c:	e75c      	b.n	80061c8 <__kernel_rem_pio2+0x1a0>
 800630e:	f8db 3000 	ldr.w	r3, [fp]
 8006312:	b955      	cbnz	r5, 800632a <__kernel_rem_pio2+0x302>
 8006314:	b123      	cbz	r3, 8006320 <__kernel_rem_pio2+0x2f8>
 8006316:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800631a:	f8cb 3000 	str.w	r3, [fp]
 800631e:	2301      	movs	r3, #1
 8006320:	3201      	adds	r2, #1
 8006322:	f10b 0b04 	add.w	fp, fp, #4
 8006326:	461d      	mov	r5, r3
 8006328:	e755      	b.n	80061d6 <__kernel_rem_pio2+0x1ae>
 800632a:	1acb      	subs	r3, r1, r3
 800632c:	f8cb 3000 	str.w	r3, [fp]
 8006330:	462b      	mov	r3, r5
 8006332:	e7f5      	b.n	8006320 <__kernel_rem_pio2+0x2f8>
 8006334:	1e62      	subs	r2, r4, #1
 8006336:	ab0c      	add	r3, sp, #48	; 0x30
 8006338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006340:	a90c      	add	r1, sp, #48	; 0x30
 8006342:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006346:	e754      	b.n	80061f2 <__kernel_rem_pio2+0x1ca>
	...
 8006354:	3ff00000 	.word	0x3ff00000
 8006358:	08006c48 	.word	0x08006c48
 800635c:	40200000 	.word	0x40200000
 8006360:	3ff00000 	.word	0x3ff00000
 8006364:	3e700000 	.word	0x3e700000
 8006368:	41700000 	.word	0x41700000
 800636c:	3fe00000 	.word	0x3fe00000
 8006370:	08006c08 	.word	0x08006c08
 8006374:	1e62      	subs	r2, r4, #1
 8006376:	ab0c      	add	r3, sp, #48	; 0x30
 8006378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006380:	e7de      	b.n	8006340 <__kernel_rem_pio2+0x318>
 8006382:	a90c      	add	r1, sp, #48	; 0x30
 8006384:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006388:	3b01      	subs	r3, #1
 800638a:	430a      	orrs	r2, r1
 800638c:	e790      	b.n	80062b0 <__kernel_rem_pio2+0x288>
 800638e:	3301      	adds	r3, #1
 8006390:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006394:	2900      	cmp	r1, #0
 8006396:	d0fa      	beq.n	800638e <__kernel_rem_pio2+0x366>
 8006398:	9a08      	ldr	r2, [sp, #32]
 800639a:	18e3      	adds	r3, r4, r3
 800639c:	18a6      	adds	r6, r4, r2
 800639e:	aa20      	add	r2, sp, #128	; 0x80
 80063a0:	1c65      	adds	r5, r4, #1
 80063a2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80063a6:	9302      	str	r3, [sp, #8]
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	42ab      	cmp	r3, r5
 80063ac:	da04      	bge.n	80063b8 <__kernel_rem_pio2+0x390>
 80063ae:	461c      	mov	r4, r3
 80063b0:	e6b5      	b.n	800611e <__kernel_rem_pio2+0xf6>
 80063b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063b4:	2301      	movs	r3, #1
 80063b6:	e7eb      	b.n	8006390 <__kernel_rem_pio2+0x368>
 80063b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063be:	f7fa f97f 	bl	80006c0 <__aeabi_i2d>
 80063c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80063c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c8:	46b3      	mov	fp, r6
 80063ca:	461c      	mov	r4, r3
 80063cc:	2700      	movs	r7, #0
 80063ce:	f04f 0800 	mov.w	r8, #0
 80063d2:	f04f 0900 	mov.w	r9, #0
 80063d6:	9b06      	ldr	r3, [sp, #24]
 80063d8:	429f      	cmp	r7, r3
 80063da:	dd06      	ble.n	80063ea <__kernel_rem_pio2+0x3c2>
 80063dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80063de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80063e2:	e9c3 8900 	strd	r8, r9, [r3]
 80063e6:	3501      	adds	r5, #1
 80063e8:	e7de      	b.n	80063a8 <__kernel_rem_pio2+0x380>
 80063ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80063ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80063f2:	f7f9 fee9 	bl	80001c8 <__aeabi_dmul>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	f7fa f813 	bl	8000428 <__adddf3>
 8006402:	3701      	adds	r7, #1
 8006404:	4680      	mov	r8, r0
 8006406:	4689      	mov	r9, r1
 8006408:	e7e5      	b.n	80063d6 <__kernel_rem_pio2+0x3ae>
 800640a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800640e:	e754      	b.n	80062ba <__kernel_rem_pio2+0x292>
 8006410:	ec47 6b10 	vmov	d0, r6, r7
 8006414:	f1ca 0000 	rsb	r0, sl, #0
 8006418:	f000 fa8e 	bl	8006938 <scalbn>
 800641c:	ec57 6b10 	vmov	r6, r7, d0
 8006420:	4b9f      	ldr	r3, [pc, #636]	; (80066a0 <__kernel_rem_pio2+0x678>)
 8006422:	ee10 0a10 	vmov	r0, s0
 8006426:	2200      	movs	r2, #0
 8006428:	4639      	mov	r1, r7
 800642a:	f7fa fa27 	bl	800087c <__aeabi_dcmpge>
 800642e:	b300      	cbz	r0, 8006472 <__kernel_rem_pio2+0x44a>
 8006430:	4b9c      	ldr	r3, [pc, #624]	; (80066a4 <__kernel_rem_pio2+0x67c>)
 8006432:	2200      	movs	r2, #0
 8006434:	4630      	mov	r0, r6
 8006436:	4639      	mov	r1, r7
 8006438:	f7f9 fec6 	bl	80001c8 <__aeabi_dmul>
 800643c:	f7fa fa32 	bl	80008a4 <__aeabi_d2iz>
 8006440:	4605      	mov	r5, r0
 8006442:	f7fa f93d 	bl	80006c0 <__aeabi_i2d>
 8006446:	4b96      	ldr	r3, [pc, #600]	; (80066a0 <__kernel_rem_pio2+0x678>)
 8006448:	2200      	movs	r2, #0
 800644a:	f7f9 febd 	bl	80001c8 <__aeabi_dmul>
 800644e:	460b      	mov	r3, r1
 8006450:	4602      	mov	r2, r0
 8006452:	4639      	mov	r1, r7
 8006454:	4630      	mov	r0, r6
 8006456:	f7f9 ffe5 	bl	8000424 <__aeabi_dsub>
 800645a:	f7fa fa23 	bl	80008a4 <__aeabi_d2iz>
 800645e:	f104 0b01 	add.w	fp, r4, #1
 8006462:	ab0c      	add	r3, sp, #48	; 0x30
 8006464:	f10a 0a18 	add.w	sl, sl, #24
 8006468:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800646c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006470:	e72b      	b.n	80062ca <__kernel_rem_pio2+0x2a2>
 8006472:	4630      	mov	r0, r6
 8006474:	4639      	mov	r1, r7
 8006476:	f7fa fa15 	bl	80008a4 <__aeabi_d2iz>
 800647a:	ab0c      	add	r3, sp, #48	; 0x30
 800647c:	46a3      	mov	fp, r4
 800647e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006482:	e722      	b.n	80062ca <__kernel_rem_pio2+0x2a2>
 8006484:	ab70      	add	r3, sp, #448	; 0x1c0
 8006486:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800648a:	ab0c      	add	r3, sp, #48	; 0x30
 800648c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006490:	f7fa f916 	bl	80006c0 <__aeabi_i2d>
 8006494:	4622      	mov	r2, r4
 8006496:	462b      	mov	r3, r5
 8006498:	f7f9 fe96 	bl	80001c8 <__aeabi_dmul>
 800649c:	4632      	mov	r2, r6
 800649e:	e9c9 0100 	strd	r0, r1, [r9]
 80064a2:	463b      	mov	r3, r7
 80064a4:	4620      	mov	r0, r4
 80064a6:	4629      	mov	r1, r5
 80064a8:	f7f9 fe8e 	bl	80001c8 <__aeabi_dmul>
 80064ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80064b0:	4604      	mov	r4, r0
 80064b2:	460d      	mov	r5, r1
 80064b4:	e713      	b.n	80062de <__kernel_rem_pio2+0x2b6>
 80064b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80064ba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80064be:	f7f9 fe83 	bl	80001c8 <__aeabi_dmul>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4620      	mov	r0, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7f9 ffad 	bl	8000428 <__adddf3>
 80064ce:	3601      	adds	r6, #1
 80064d0:	4604      	mov	r4, r0
 80064d2:	460d      	mov	r5, r1
 80064d4:	9b04      	ldr	r3, [sp, #16]
 80064d6:	429e      	cmp	r6, r3
 80064d8:	dc01      	bgt.n	80064de <__kernel_rem_pio2+0x4b6>
 80064da:	45b0      	cmp	r8, r6
 80064dc:	daeb      	bge.n	80064b6 <__kernel_rem_pio2+0x48e>
 80064de:	ab48      	add	r3, sp, #288	; 0x120
 80064e0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80064e4:	e9c3 4500 	strd	r4, r5, [r3]
 80064e8:	3f01      	subs	r7, #1
 80064ea:	f108 0801 	add.w	r8, r8, #1
 80064ee:	e6ff      	b.n	80062f0 <__kernel_rem_pio2+0x2c8>
 80064f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	dc0b      	bgt.n	800650e <__kernel_rem_pio2+0x4e6>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dc6e      	bgt.n	80065d8 <__kernel_rem_pio2+0x5b0>
 80064fa:	d045      	beq.n	8006588 <__kernel_rem_pio2+0x560>
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	f003 0007 	and.w	r0, r3, #7
 8006502:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006506:	ecbd 8b02 	vpop	{d8}
 800650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006510:	2b03      	cmp	r3, #3
 8006512:	d1f3      	bne.n	80064fc <__kernel_rem_pio2+0x4d4>
 8006514:	ab48      	add	r3, sp, #288	; 0x120
 8006516:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800651a:	46d0      	mov	r8, sl
 800651c:	46d9      	mov	r9, fp
 800651e:	f1b9 0f00 	cmp.w	r9, #0
 8006522:	f1a8 0808 	sub.w	r8, r8, #8
 8006526:	dc64      	bgt.n	80065f2 <__kernel_rem_pio2+0x5ca>
 8006528:	465c      	mov	r4, fp
 800652a:	2c01      	cmp	r4, #1
 800652c:	f1aa 0a08 	sub.w	sl, sl, #8
 8006530:	dc7e      	bgt.n	8006630 <__kernel_rem_pio2+0x608>
 8006532:	2000      	movs	r0, #0
 8006534:	2100      	movs	r1, #0
 8006536:	f1bb 0f01 	cmp.w	fp, #1
 800653a:	f300 8097 	bgt.w	800666c <__kernel_rem_pio2+0x644>
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006544:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006548:	2b00      	cmp	r3, #0
 800654a:	f040 8099 	bne.w	8006680 <__kernel_rem_pio2+0x658>
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	e9c3 5600 	strd	r5, r6, [r3]
 8006554:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006558:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800655c:	e7ce      	b.n	80064fc <__kernel_rem_pio2+0x4d4>
 800655e:	ab48      	add	r3, sp, #288	; 0x120
 8006560:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f7f9 ff5e 	bl	8000428 <__adddf3>
 800656c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006570:	f1bb 0f00 	cmp.w	fp, #0
 8006574:	daf3      	bge.n	800655e <__kernel_rem_pio2+0x536>
 8006576:	9b02      	ldr	r3, [sp, #8]
 8006578:	b113      	cbz	r3, 8006580 <__kernel_rem_pio2+0x558>
 800657a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800657e:	4619      	mov	r1, r3
 8006580:	9b01      	ldr	r3, [sp, #4]
 8006582:	e9c3 0100 	strd	r0, r1, [r3]
 8006586:	e7b9      	b.n	80064fc <__kernel_rem_pio2+0x4d4>
 8006588:	2000      	movs	r0, #0
 800658a:	2100      	movs	r1, #0
 800658c:	e7f0      	b.n	8006570 <__kernel_rem_pio2+0x548>
 800658e:	ab48      	add	r3, sp, #288	; 0x120
 8006590:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f7f9 ff46 	bl	8000428 <__adddf3>
 800659c:	3c01      	subs	r4, #1
 800659e:	2c00      	cmp	r4, #0
 80065a0:	daf5      	bge.n	800658e <__kernel_rem_pio2+0x566>
 80065a2:	9b02      	ldr	r3, [sp, #8]
 80065a4:	b1e3      	cbz	r3, 80065e0 <__kernel_rem_pio2+0x5b8>
 80065a6:	4602      	mov	r2, r0
 80065a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065ac:	9c01      	ldr	r4, [sp, #4]
 80065ae:	e9c4 2300 	strd	r2, r3, [r4]
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80065ba:	f7f9 ff33 	bl	8000424 <__aeabi_dsub>
 80065be:	ad4a      	add	r5, sp, #296	; 0x128
 80065c0:	2401      	movs	r4, #1
 80065c2:	45a3      	cmp	fp, r4
 80065c4:	da0f      	bge.n	80065e6 <__kernel_rem_pio2+0x5be>
 80065c6:	9b02      	ldr	r3, [sp, #8]
 80065c8:	b113      	cbz	r3, 80065d0 <__kernel_rem_pio2+0x5a8>
 80065ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065ce:	4619      	mov	r1, r3
 80065d0:	9b01      	ldr	r3, [sp, #4]
 80065d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80065d6:	e791      	b.n	80064fc <__kernel_rem_pio2+0x4d4>
 80065d8:	465c      	mov	r4, fp
 80065da:	2000      	movs	r0, #0
 80065dc:	2100      	movs	r1, #0
 80065de:	e7de      	b.n	800659e <__kernel_rem_pio2+0x576>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	e7e2      	b.n	80065ac <__kernel_rem_pio2+0x584>
 80065e6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80065ea:	f7f9 ff1d 	bl	8000428 <__adddf3>
 80065ee:	3401      	adds	r4, #1
 80065f0:	e7e7      	b.n	80065c2 <__kernel_rem_pio2+0x59a>
 80065f2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80065f6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80065fa:	4620      	mov	r0, r4
 80065fc:	4632      	mov	r2, r6
 80065fe:	463b      	mov	r3, r7
 8006600:	4629      	mov	r1, r5
 8006602:	f7f9 ff11 	bl	8000428 <__adddf3>
 8006606:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4620      	mov	r0, r4
 8006610:	4629      	mov	r1, r5
 8006612:	f7f9 ff07 	bl	8000424 <__aeabi_dsub>
 8006616:	4632      	mov	r2, r6
 8006618:	463b      	mov	r3, r7
 800661a:	f7f9 ff05 	bl	8000428 <__adddf3>
 800661e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006622:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8006626:	ed88 7b00 	vstr	d7, [r8]
 800662a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800662e:	e776      	b.n	800651e <__kernel_rem_pio2+0x4f6>
 8006630:	e9da 8900 	ldrd	r8, r9, [sl]
 8006634:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006638:	4640      	mov	r0, r8
 800663a:	4632      	mov	r2, r6
 800663c:	463b      	mov	r3, r7
 800663e:	4649      	mov	r1, r9
 8006640:	f7f9 fef2 	bl	8000428 <__adddf3>
 8006644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4640      	mov	r0, r8
 800664e:	4649      	mov	r1, r9
 8006650:	f7f9 fee8 	bl	8000424 <__aeabi_dsub>
 8006654:	4632      	mov	r2, r6
 8006656:	463b      	mov	r3, r7
 8006658:	f7f9 fee6 	bl	8000428 <__adddf3>
 800665c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006660:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006664:	ed8a 7b00 	vstr	d7, [sl]
 8006668:	3c01      	subs	r4, #1
 800666a:	e75e      	b.n	800652a <__kernel_rem_pio2+0x502>
 800666c:	ab48      	add	r3, sp, #288	; 0x120
 800666e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f7f9 fed7 	bl	8000428 <__adddf3>
 800667a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800667e:	e75a      	b.n	8006536 <__kernel_rem_pio2+0x50e>
 8006680:	9b01      	ldr	r3, [sp, #4]
 8006682:	9a01      	ldr	r2, [sp, #4]
 8006684:	601d      	str	r5, [r3, #0]
 8006686:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800668a:	605c      	str	r4, [r3, #4]
 800668c:	609f      	str	r7, [r3, #8]
 800668e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006692:	60d3      	str	r3, [r2, #12]
 8006694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006698:	6110      	str	r0, [r2, #16]
 800669a:	6153      	str	r3, [r2, #20]
 800669c:	e72e      	b.n	80064fc <__kernel_rem_pio2+0x4d4>
 800669e:	bf00      	nop
 80066a0:	41700000 	.word	0x41700000
 80066a4:	3e700000 	.word	0x3e700000

080066a8 <__kernel_sin>:
 80066a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ac:	ed2d 8b04 	vpush	{d8-d9}
 80066b0:	eeb0 8a41 	vmov.f32	s16, s2
 80066b4:	eef0 8a61 	vmov.f32	s17, s3
 80066b8:	ec55 4b10 	vmov	r4, r5, d0
 80066bc:	b083      	sub	sp, #12
 80066be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80066c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80066c6:	9001      	str	r0, [sp, #4]
 80066c8:	da06      	bge.n	80066d8 <__kernel_sin+0x30>
 80066ca:	ee10 0a10 	vmov	r0, s0
 80066ce:	4629      	mov	r1, r5
 80066d0:	f7fa f8e8 	bl	80008a4 <__aeabi_d2iz>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d051      	beq.n	800677c <__kernel_sin+0xd4>
 80066d8:	4622      	mov	r2, r4
 80066da:	462b      	mov	r3, r5
 80066dc:	4620      	mov	r0, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	f7f9 fd72 	bl	80001c8 <__aeabi_dmul>
 80066e4:	4682      	mov	sl, r0
 80066e6:	468b      	mov	fp, r1
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4620      	mov	r0, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	f7f9 fd6a 	bl	80001c8 <__aeabi_dmul>
 80066f4:	a341      	add	r3, pc, #260	; (adr r3, 80067fc <__kernel_sin+0x154>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	4680      	mov	r8, r0
 80066fc:	4689      	mov	r9, r1
 80066fe:	4650      	mov	r0, sl
 8006700:	4659      	mov	r1, fp
 8006702:	f7f9 fd61 	bl	80001c8 <__aeabi_dmul>
 8006706:	a33f      	add	r3, pc, #252	; (adr r3, 8006804 <__kernel_sin+0x15c>)
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f7f9 fe8a 	bl	8000424 <__aeabi_dsub>
 8006710:	4652      	mov	r2, sl
 8006712:	465b      	mov	r3, fp
 8006714:	f7f9 fd58 	bl	80001c8 <__aeabi_dmul>
 8006718:	a33c      	add	r3, pc, #240	; (adr r3, 800680c <__kernel_sin+0x164>)
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f7f9 fe83 	bl	8000428 <__adddf3>
 8006722:	4652      	mov	r2, sl
 8006724:	465b      	mov	r3, fp
 8006726:	f7f9 fd4f 	bl	80001c8 <__aeabi_dmul>
 800672a:	a33a      	add	r3, pc, #232	; (adr r3, 8006814 <__kernel_sin+0x16c>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f7f9 fe78 	bl	8000424 <__aeabi_dsub>
 8006734:	4652      	mov	r2, sl
 8006736:	465b      	mov	r3, fp
 8006738:	f7f9 fd46 	bl	80001c8 <__aeabi_dmul>
 800673c:	a337      	add	r3, pc, #220	; (adr r3, 800681c <__kernel_sin+0x174>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 fe71 	bl	8000428 <__adddf3>
 8006746:	9b01      	ldr	r3, [sp, #4]
 8006748:	4606      	mov	r6, r0
 800674a:	460f      	mov	r7, r1
 800674c:	b9eb      	cbnz	r3, 800678a <__kernel_sin+0xe2>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4650      	mov	r0, sl
 8006754:	4659      	mov	r1, fp
 8006756:	f7f9 fd37 	bl	80001c8 <__aeabi_dmul>
 800675a:	a325      	add	r3, pc, #148	; (adr r3, 80067f0 <__kernel_sin+0x148>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f7f9 fe60 	bl	8000424 <__aeabi_dsub>
 8006764:	4642      	mov	r2, r8
 8006766:	464b      	mov	r3, r9
 8006768:	f7f9 fd2e 	bl	80001c8 <__aeabi_dmul>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4620      	mov	r0, r4
 8006772:	4629      	mov	r1, r5
 8006774:	f7f9 fe58 	bl	8000428 <__adddf3>
 8006778:	4604      	mov	r4, r0
 800677a:	460d      	mov	r5, r1
 800677c:	ec45 4b10 	vmov	d0, r4, r5
 8006780:	b003      	add	sp, #12
 8006782:	ecbd 8b04 	vpop	{d8-d9}
 8006786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678a:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <__kernel_sin+0x150>)
 800678c:	ec51 0b18 	vmov	r0, r1, d8
 8006790:	2200      	movs	r2, #0
 8006792:	f7f9 fd19 	bl	80001c8 <__aeabi_dmul>
 8006796:	4632      	mov	r2, r6
 8006798:	ec41 0b19 	vmov	d9, r0, r1
 800679c:	463b      	mov	r3, r7
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7f9 fd11 	bl	80001c8 <__aeabi_dmul>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	ec51 0b19 	vmov	r0, r1, d9
 80067ae:	f7f9 fe39 	bl	8000424 <__aeabi_dsub>
 80067b2:	4652      	mov	r2, sl
 80067b4:	465b      	mov	r3, fp
 80067b6:	f7f9 fd07 	bl	80001c8 <__aeabi_dmul>
 80067ba:	ec53 2b18 	vmov	r2, r3, d8
 80067be:	f7f9 fe31 	bl	8000424 <__aeabi_dsub>
 80067c2:	a30b      	add	r3, pc, #44	; (adr r3, 80067f0 <__kernel_sin+0x148>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	4606      	mov	r6, r0
 80067ca:	460f      	mov	r7, r1
 80067cc:	4640      	mov	r0, r8
 80067ce:	4649      	mov	r1, r9
 80067d0:	f7f9 fcfa 	bl	80001c8 <__aeabi_dmul>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7f9 fe24 	bl	8000428 <__adddf3>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7f9 fe1c 	bl	8000424 <__aeabi_dsub>
 80067ec:	e7c4      	b.n	8006778 <__kernel_sin+0xd0>
 80067ee:	bf00      	nop
 80067f0:	55555549 	.word	0x55555549
 80067f4:	3fc55555 	.word	0x3fc55555
 80067f8:	3fe00000 	.word	0x3fe00000
 80067fc:	5acfd57c 	.word	0x5acfd57c
 8006800:	3de5d93a 	.word	0x3de5d93a
 8006804:	8a2b9ceb 	.word	0x8a2b9ceb
 8006808:	3e5ae5e6 	.word	0x3e5ae5e6
 800680c:	57b1fe7d 	.word	0x57b1fe7d
 8006810:	3ec71de3 	.word	0x3ec71de3
 8006814:	19c161d5 	.word	0x19c161d5
 8006818:	3f2a01a0 	.word	0x3f2a01a0
 800681c:	1110f8a6 	.word	0x1110f8a6
 8006820:	3f811111 	.word	0x3f811111

08006824 <fabs>:
 8006824:	ec51 0b10 	vmov	r0, r1, d0
 8006828:	ee10 2a10 	vmov	r2, s0
 800682c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006830:	ec43 2b10 	vmov	d0, r2, r3
 8006834:	4770      	bx	lr
	...

08006838 <floor>:
 8006838:	ec51 0b10 	vmov	r0, r1, d0
 800683c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006840:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006844:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006848:	2e13      	cmp	r6, #19
 800684a:	ee10 5a10 	vmov	r5, s0
 800684e:	ee10 8a10 	vmov	r8, s0
 8006852:	460c      	mov	r4, r1
 8006854:	dc32      	bgt.n	80068bc <floor+0x84>
 8006856:	2e00      	cmp	r6, #0
 8006858:	da14      	bge.n	8006884 <floor+0x4c>
 800685a:	a333      	add	r3, pc, #204	; (adr r3, 8006928 <floor+0xf0>)
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fde2 	bl	8000428 <__adddf3>
 8006864:	2200      	movs	r2, #0
 8006866:	2300      	movs	r3, #0
 8006868:	f7fa f812 	bl	8000890 <__aeabi_dcmpgt>
 800686c:	b138      	cbz	r0, 800687e <floor+0x46>
 800686e:	2c00      	cmp	r4, #0
 8006870:	da57      	bge.n	8006922 <floor+0xea>
 8006872:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006876:	431d      	orrs	r5, r3
 8006878:	d001      	beq.n	800687e <floor+0x46>
 800687a:	4c2d      	ldr	r4, [pc, #180]	; (8006930 <floor+0xf8>)
 800687c:	2500      	movs	r5, #0
 800687e:	4621      	mov	r1, r4
 8006880:	4628      	mov	r0, r5
 8006882:	e025      	b.n	80068d0 <floor+0x98>
 8006884:	4f2b      	ldr	r7, [pc, #172]	; (8006934 <floor+0xfc>)
 8006886:	4137      	asrs	r7, r6
 8006888:	ea01 0307 	and.w	r3, r1, r7
 800688c:	4303      	orrs	r3, r0
 800688e:	d01f      	beq.n	80068d0 <floor+0x98>
 8006890:	a325      	add	r3, pc, #148	; (adr r3, 8006928 <floor+0xf0>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 fdc7 	bl	8000428 <__adddf3>
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	f7f9 fff7 	bl	8000890 <__aeabi_dcmpgt>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d0eb      	beq.n	800687e <floor+0x46>
 80068a6:	2c00      	cmp	r4, #0
 80068a8:	bfbe      	ittt	lt
 80068aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80068ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80068b2:	19a4      	addlt	r4, r4, r6
 80068b4:	ea24 0407 	bic.w	r4, r4, r7
 80068b8:	2500      	movs	r5, #0
 80068ba:	e7e0      	b.n	800687e <floor+0x46>
 80068bc:	2e33      	cmp	r6, #51	; 0x33
 80068be:	dd0b      	ble.n	80068d8 <floor+0xa0>
 80068c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80068c4:	d104      	bne.n	80068d0 <floor+0x98>
 80068c6:	ee10 2a10 	vmov	r2, s0
 80068ca:	460b      	mov	r3, r1
 80068cc:	f7f9 fdac 	bl	8000428 <__adddf3>
 80068d0:	ec41 0b10 	vmov	d0, r0, r1
 80068d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80068dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068e0:	fa23 f707 	lsr.w	r7, r3, r7
 80068e4:	4207      	tst	r7, r0
 80068e6:	d0f3      	beq.n	80068d0 <floor+0x98>
 80068e8:	a30f      	add	r3, pc, #60	; (adr r3, 8006928 <floor+0xf0>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7f9 fd9b 	bl	8000428 <__adddf3>
 80068f2:	2200      	movs	r2, #0
 80068f4:	2300      	movs	r3, #0
 80068f6:	f7f9 ffcb 	bl	8000890 <__aeabi_dcmpgt>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d0bf      	beq.n	800687e <floor+0x46>
 80068fe:	2c00      	cmp	r4, #0
 8006900:	da02      	bge.n	8006908 <floor+0xd0>
 8006902:	2e14      	cmp	r6, #20
 8006904:	d103      	bne.n	800690e <floor+0xd6>
 8006906:	3401      	adds	r4, #1
 8006908:	ea25 0507 	bic.w	r5, r5, r7
 800690c:	e7b7      	b.n	800687e <floor+0x46>
 800690e:	2301      	movs	r3, #1
 8006910:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006914:	fa03 f606 	lsl.w	r6, r3, r6
 8006918:	4435      	add	r5, r6
 800691a:	4545      	cmp	r5, r8
 800691c:	bf38      	it	cc
 800691e:	18e4      	addcc	r4, r4, r3
 8006920:	e7f2      	b.n	8006908 <floor+0xd0>
 8006922:	2500      	movs	r5, #0
 8006924:	462c      	mov	r4, r5
 8006926:	e7aa      	b.n	800687e <floor+0x46>
 8006928:	8800759c 	.word	0x8800759c
 800692c:	7e37e43c 	.word	0x7e37e43c
 8006930:	bff00000 	.word	0xbff00000
 8006934:	000fffff 	.word	0x000fffff

08006938 <scalbn>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	ec55 4b10 	vmov	r4, r5, d0
 800693e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006942:	4606      	mov	r6, r0
 8006944:	462b      	mov	r3, r5
 8006946:	b99a      	cbnz	r2, 8006970 <scalbn+0x38>
 8006948:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800694c:	4323      	orrs	r3, r4
 800694e:	d036      	beq.n	80069be <scalbn+0x86>
 8006950:	4b39      	ldr	r3, [pc, #228]	; (8006a38 <scalbn+0x100>)
 8006952:	4629      	mov	r1, r5
 8006954:	ee10 0a10 	vmov	r0, s0
 8006958:	2200      	movs	r2, #0
 800695a:	f7f9 fc35 	bl	80001c8 <__aeabi_dmul>
 800695e:	4b37      	ldr	r3, [pc, #220]	; (8006a3c <scalbn+0x104>)
 8006960:	429e      	cmp	r6, r3
 8006962:	4604      	mov	r4, r0
 8006964:	460d      	mov	r5, r1
 8006966:	da10      	bge.n	800698a <scalbn+0x52>
 8006968:	a32b      	add	r3, pc, #172	; (adr r3, 8006a18 <scalbn+0xe0>)
 800696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696e:	e03a      	b.n	80069e6 <scalbn+0xae>
 8006970:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006974:	428a      	cmp	r2, r1
 8006976:	d10c      	bne.n	8006992 <scalbn+0x5a>
 8006978:	ee10 2a10 	vmov	r2, s0
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fd52 	bl	8000428 <__adddf3>
 8006984:	4604      	mov	r4, r0
 8006986:	460d      	mov	r5, r1
 8006988:	e019      	b.n	80069be <scalbn+0x86>
 800698a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800698e:	460b      	mov	r3, r1
 8006990:	3a36      	subs	r2, #54	; 0x36
 8006992:	4432      	add	r2, r6
 8006994:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006998:	428a      	cmp	r2, r1
 800699a:	dd08      	ble.n	80069ae <scalbn+0x76>
 800699c:	2d00      	cmp	r5, #0
 800699e:	a120      	add	r1, pc, #128	; (adr r1, 8006a20 <scalbn+0xe8>)
 80069a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069a4:	da1c      	bge.n	80069e0 <scalbn+0xa8>
 80069a6:	a120      	add	r1, pc, #128	; (adr r1, 8006a28 <scalbn+0xf0>)
 80069a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ac:	e018      	b.n	80069e0 <scalbn+0xa8>
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	dd08      	ble.n	80069c4 <scalbn+0x8c>
 80069b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069be:	ec45 4b10 	vmov	d0, r4, r5
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80069c8:	da19      	bge.n	80069fe <scalbn+0xc6>
 80069ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80069ce:	429e      	cmp	r6, r3
 80069d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80069d4:	dd0a      	ble.n	80069ec <scalbn+0xb4>
 80069d6:	a112      	add	r1, pc, #72	; (adr r1, 8006a20 <scalbn+0xe8>)
 80069d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e2      	bne.n	80069a6 <scalbn+0x6e>
 80069e0:	a30f      	add	r3, pc, #60	; (adr r3, 8006a20 <scalbn+0xe8>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 fbef 	bl	80001c8 <__aeabi_dmul>
 80069ea:	e7cb      	b.n	8006984 <scalbn+0x4c>
 80069ec:	a10a      	add	r1, pc, #40	; (adr r1, 8006a18 <scalbn+0xe0>)
 80069ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0b8      	beq.n	8006968 <scalbn+0x30>
 80069f6:	a10e      	add	r1, pc, #56	; (adr r1, 8006a30 <scalbn+0xf8>)
 80069f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069fc:	e7b4      	b.n	8006968 <scalbn+0x30>
 80069fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a02:	3236      	adds	r2, #54	; 0x36
 8006a04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <scalbn+0x108>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	e7e8      	b.n	80069e6 <scalbn+0xae>
 8006a14:	f3af 8000 	nop.w
 8006a18:	c2f8f359 	.word	0xc2f8f359
 8006a1c:	01a56e1f 	.word	0x01a56e1f
 8006a20:	8800759c 	.word	0x8800759c
 8006a24:	7e37e43c 	.word	0x7e37e43c
 8006a28:	8800759c 	.word	0x8800759c
 8006a2c:	fe37e43c 	.word	0xfe37e43c
 8006a30:	c2f8f359 	.word	0xc2f8f359
 8006a34:	81a56e1f 	.word	0x81a56e1f
 8006a38:	43500000 	.word	0x43500000
 8006a3c:	ffff3cb0 	.word	0xffff3cb0
 8006a40:	3c900000 	.word	0x3c900000

08006a44 <_init>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	bf00      	nop
 8006a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4a:	bc08      	pop	{r3}
 8006a4c:	469e      	mov	lr, r3
 8006a4e:	4770      	bx	lr

08006a50 <_fini>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr
